
motorboat_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08008c64  08008c64  00009c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dec  08008dec  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df4  08008df4  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df4  08008df4  00009df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008df8  08008df8  00009df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008dfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029dc  20000010  08008e0c  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029ec  08008e0c  0000a9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000284ae  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f76  00000000  00000000  000324ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  00037468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c38  00000000  00000000  00039890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005039  00000000  00000000  0003b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029b35  00000000  00000000  00040501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108980  00000000  00000000  0006a036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001729b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c2c  00000000  00000000  001729fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0017c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c4c 	.word	0x08008c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008c4c 	.word	0x08008c4c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fffb 	bl	80014be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f866 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa00 	bl	80008d0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8c4 	bl	800065c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f8fa 	bl	80006cc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f938 	bl	800074c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f95c 	bl	8000798 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f998 	bl	8000814 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e4:	f000 f9c6 	bl	8000874 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f005 fa26 	bl	8005938 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueBoatCommand */
  queueBoatCommandHandle = osMessageQueueNew (1, sizeof(BoatCommand_t), &queueBoatCommand_attributes);
 80004ec:	4a19      	ldr	r2, [pc, #100]	@ (8000554 <main+0x94>)
 80004ee:	2104      	movs	r1, #4
 80004f0:	2001      	movs	r0, #1
 80004f2:	f005 fbe7 	bl	8005cc4 <osMessageQueueNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <main+0x98>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a17      	ldr	r2, [pc, #92]	@ (800055c <main+0x9c>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4817      	ldr	r0, [pc, #92]	@ (8000560 <main+0xa0>)
 8000502:	f005 fa63 	bl	80059cc <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <main+0xa4>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of boatSMTask */
  boatSMTaskHandle = osThreadNew(StartTaskBoatSM, NULL, &boatSMTask_attributes);
 800050c:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <main+0xa8>)
 800050e:	2100      	movs	r1, #0
 8000510:	4816      	ldr	r0, [pc, #88]	@ (800056c <main+0xac>)
 8000512:	f005 fa5b 	bl	80059cc <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <main+0xb0>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of depthDetectTask */
  depthDetectTaskHandle = osThreadNew(StartTaskDepthDetect, NULL, &depthDetectTask_attributes);
 800051c:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <main+0xb4>)
 800051e:	2100      	movs	r1, #0
 8000520:	4815      	ldr	r0, [pc, #84]	@ (8000578 <main+0xb8>)
 8000522:	f005 fa53 	bl	80059cc <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <main+0xbc>)
 800052a:	6013      	str	r3, [r2, #0]

  /* creation of readMotorTask */
  readMotorTaskHandle = osThreadNew(StartTaskReadMotorCommands, NULL, &readMotorTask_attributes);
 800052c:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <main+0xc0>)
 800052e:	2100      	movs	r1, #0
 8000530:	4814      	ldr	r0, [pc, #80]	@ (8000584 <main+0xc4>)
 8000532:	f005 fa4b 	bl	80059cc <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <main+0xc8>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of sendDataTask */
  sendDataTaskHandle = osThreadNew(StartTaskSendData, NULL, &sendDataTask_attributes);
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <main+0xcc>)
 800053e:	2100      	movs	r1, #0
 8000540:	4813      	ldr	r0, [pc, #76]	@ (8000590 <main+0xd0>)
 8000542:	f005 fa43 	bl	80059cc <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <main+0xd4>)
 800054a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f005 fa18 	bl	8005980 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <main+0x90>
 8000554:	08008d8c 	.word	0x08008d8c
 8000558:	20001050 	.word	0x20001050
 800055c:	08008cd8 	.word	0x08008cd8
 8000560:	08000c59 	.word	0x08000c59
 8000564:	200006cc 	.word	0x200006cc
 8000568:	08008cfc 	.word	0x08008cfc
 800056c:	08000c69 	.word	0x08000c69
 8000570:	200006d0 	.word	0x200006d0
 8000574:	08008d20 	.word	0x08008d20
 8000578:	08000d41 	.word	0x08000d41
 800057c:	20000930 	.word	0x20000930
 8000580:	08008d44 	.word	0x08008d44
 8000584:	08000d51 	.word	0x08000d51
 8000588:	20000b90 	.word	0x20000b90
 800058c:	08008d68 	.word	0x08008d68
 8000590:	08000d7d 	.word	0x08000d7d
 8000594:	20000df0 	.word	0x20000df0

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	@ 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	@ 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 fb16 	bl	8008bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005be:	f001 feb1 	bl	8002324 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 fbf2 	bl	8000db0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005cc:	f001 fe8c 	bl	80022e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005d0:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <SystemClock_Config+0xc0>)
 80005d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005d6:	4a20      	ldr	r2, [pc, #128]	@ (8000658 <SystemClock_Config+0xc0>)
 80005d8:	f023 0318 	bic.w	r3, r3, #24
 80005dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005e0:	2314      	movs	r3, #20
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f0:	2360      	movs	r3, #96	@ 0x60
 80005f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f8:	2301      	movs	r3, #1
 80005fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000600:	2328      	movs	r3, #40	@ 0x28
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000604:	2307      	movs	r3, #7
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ffa7 	bl	8002568 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000620:	f000 fbc6 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2303      	movs	r3, #3
 800062a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2104      	movs	r1, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fb6f 	bl	8002d20 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000648:	f000 fbb2 	bl	8000db0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064c:	f003 f8a8 	bl	80037a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000650:	bf00      	nop
 8000652:	3758      	adds	r7, #88	@ 0x58
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 8000662:	4a19      	ldr	r2, [pc, #100]	@ (80006c8 <MX_DFSDM1_Init+0x6c>)
 8000664:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 8000668:	2201      	movs	r2, #1
 800066a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 8000674:	2202      	movs	r2, #2
 8000676:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 8000686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800068a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 8000694:	2204      	movs	r2, #4
 8000696:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_DFSDM1_Init+0x68>)
 80006b2:	f001 f843 	bl	800173c <HAL_DFSDM_ChannelInit>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006bc:	f000 fb78 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000002c 	.word	0x2000002c
 80006c8:	40016020 	.word	0x40016020

080006cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <MX_I2C2_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_I2C2_Init+0x7c>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e2:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_I2C2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000706:	480e      	ldr	r0, [pc, #56]	@ (8000740 <MX_I2C2_Init+0x74>)
 8000708:	f001 fb89 	bl	8001e1e <HAL_I2C_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000712:	f000 fb4d 	bl	8000db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4809      	ldr	r0, [pc, #36]	@ (8000740 <MX_I2C2_Init+0x74>)
 800071a:	f001 fc1b 	bl	8001f54 <HAL_I2CEx_ConfigAnalogFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000724:	f000 fb44 	bl	8000db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_I2C2_Init+0x74>)
 800072c:	f001 fc5d 	bl	8001fea <HAL_I2CEx_ConfigDigitalFilter>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 fb3b 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000064 	.word	0x20000064
 8000744:	40005800 	.word	0x40005800
 8000748:	10d19ce4 	.word	0x10d19ce4

0800074c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 8000752:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <MX_QUADSPI_Init+0x48>)
 8000754:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 8000758:	2202      	movs	r2, #2
 800075a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 800075e:	2204      	movs	r2, #4
 8000760:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 8000764:	2210      	movs	r2, #16
 8000766:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 800076a:	2217      	movs	r2, #23
 800076c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_QUADSPI_Init+0x44>)
 800077c:	f001 fe38 	bl	80023f0 <HAL_QSPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000786:	f000 fb13 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000b8 	.word	0x200000b8
 8000794:	a0001000 	.word	0xa0001000

08000798 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <MX_SPI3_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	@ (8000810 <MX_SPI3_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_SPI3_Init+0x74>)
 80007a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_SPI3_Init+0x74>)
 80007b2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_SPI3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_SPI3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_SPI3_Init+0x74>)
 80007c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_SPI3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_SPI3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_SPI3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_SPI3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_SPI3_Init+0x74>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_SPI3_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_SPI3_Init+0x74>)
 80007f8:	f003 f9b4 	bl	8003b64 <HAL_SPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 fad5 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000fc 	.word	0x200000fc
 8000810:	40003c00 	.word	0x40003c00

08000814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_USART1_UART_Init+0x58>)
 800081a:	4a15      	ldr	r2, [pc, #84]	@ (8000870 <MX_USART1_UART_Init+0x5c>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART1_UART_Init+0x58>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART1_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART1_UART_Init+0x58>)
 8000858:	f003 fcec 	bl	8004234 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 faa5 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000160 	.word	0x20000160
 8000870:	40013800 	.word	0x40013800

08000874 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800087e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2206      	movs	r2, #6
 8000884:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2202      	movs	r2, #2
 800088a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2202      	movs	r2, #2
 8000890:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	f001 fbe3 	bl	8002082 <HAL_PCD_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 fa75 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200001e8 	.word	0x200001e8

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	4bbd      	ldr	r3, [pc, #756]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4abc      	ldr	r2, [pc, #752]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4bba      	ldr	r3, [pc, #744]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4bb7      	ldr	r3, [pc, #732]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4ab6      	ldr	r2, [pc, #728]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4bb4      	ldr	r3, [pc, #720]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4bb1      	ldr	r3, [pc, #708]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4ab0      	ldr	r2, [pc, #704]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4bae      	ldr	r3, [pc, #696]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4bab      	ldr	r3, [pc, #684]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4aaa      	ldr	r2, [pc, #680]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4ba8      	ldr	r3, [pc, #672]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4ba5      	ldr	r3, [pc, #660]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4aa4      	ldr	r2, [pc, #656]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4ba2      	ldr	r3, [pc, #648]	@ (8000bdc <MX_GPIO_Init+0x30c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000964:	489e      	ldr	r0, [pc, #632]	@ (8000be0 <MX_GPIO_Init+0x310>)
 8000966:	f001 fa1f 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f001 fa18 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000978:	2200      	movs	r2, #0
 800097a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800097e:	4899      	ldr	r0, [pc, #612]	@ (8000be4 <MX_GPIO_Init+0x314>)
 8000980:	f001 fa12 	bl	8001da8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f241 0181 	movw	r1, #4225	@ 0x1081
 800098a:	4897      	ldr	r0, [pc, #604]	@ (8000be8 <MX_GPIO_Init+0x318>)
 800098c:	f001 fa0c 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000996:	4894      	ldr	r0, [pc, #592]	@ (8000be8 <MX_GPIO_Init+0x318>)
 8000998:	f001 fa06 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009a2:	4892      	ldr	r0, [pc, #584]	@ (8000bec <MX_GPIO_Init+0x31c>)
 80009a4:	f001 fa00 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2120      	movs	r1, #32
 80009ac:	488d      	ldr	r0, [pc, #564]	@ (8000be4 <MX_GPIO_Init+0x314>)
 80009ae:	f001 f9fb 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2101      	movs	r1, #1
 80009b6:	488a      	ldr	r0, [pc, #552]	@ (8000be0 <MX_GPIO_Init+0x310>)
 80009b8:	f001 f9f6 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009bc:	f240 1315 	movw	r3, #277	@ 0x115
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4882      	ldr	r0, [pc, #520]	@ (8000be0 <MX_GPIO_Init+0x310>)
 80009d6:	f001 f83d 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009da:	236a      	movs	r3, #106	@ 0x6a
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	487c      	ldr	r0, [pc, #496]	@ (8000be0 <MX_GPIO_Init+0x310>)
 80009f0:	f001 f830 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4878      	ldr	r0, [pc, #480]	@ (8000bec <MX_GPIO_Init+0x31c>)
 8000a0c:	f001 f822 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a10:	233f      	movs	r3, #63	@ 0x3f
 8000a12:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a14:	230b      	movs	r3, #11
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4872      	ldr	r0, [pc, #456]	@ (8000bec <MX_GPIO_Init+0x31c>)
 8000a24:	f001 f816 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f001 f805 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a4a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f000 fff5 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f000 ffe4 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a90:	230b      	movs	r3, #11
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f000 ffd7 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000aa6:	23e0      	movs	r3, #224	@ 0xe0
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac4:	f000 ffc6 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000acc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4841      	ldr	r0, [pc, #260]	@ (8000be4 <MX_GPIO_Init+0x314>)
 8000ade:	f000 ffb9 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae6:	230b      	movs	r3, #11
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	483b      	ldr	r0, [pc, #236]	@ (8000be4 <MX_GPIO_Init+0x314>)
 8000af6:	f000 ffad 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000afa:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000afe:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4834      	ldr	r0, [pc, #208]	@ (8000be4 <MX_GPIO_Init+0x314>)
 8000b14:	f000 ff9e 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000b18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	482c      	ldr	r0, [pc, #176]	@ (8000be8 <MX_GPIO_Init+0x318>)
 8000b36:	f000 ff8d 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b3a:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b3e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4825      	ldr	r0, [pc, #148]	@ (8000be8 <MX_GPIO_Init+0x318>)
 8000b52:	f000 ff7f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b56:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481e      	ldr	r0, [pc, #120]	@ (8000be8 <MX_GPIO_Init+0x318>)
 8000b70:	f000 ff70 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b74:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4817      	ldr	r0, [pc, #92]	@ (8000bec <MX_GPIO_Init+0x31c>)
 8000b8e:	f000 ff61 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b92:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4810      	ldr	r0, [pc, #64]	@ (8000bec <MX_GPIO_Init+0x31c>)
 8000baa:	f000 ff53 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_GPIO_Init+0x318>)
 8000bca:	f000 ff43 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bce:	2378      	movs	r3, #120	@ 0x78
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e00a      	b.n	8000bf0 <MX_GPIO_Init+0x320>
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48001000 	.word	0x48001000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48000800 	.word	0x48000800
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <MX_GPIO_Init+0x380>)
 8000c02:	f000 ff27 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_GPIO_Init+0x384>)
 8000c24:	f000 ff16 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	2017      	movs	r0, #23
 8000c2e:	f000 fd5b 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c32:	2017      	movs	r0, #23
 8000c34:	f000 fd74 	bl	8001720 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2028      	movs	r0, #40	@ 0x28
 8000c3e:	f000 fd53 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c42:	2028      	movs	r0, #40	@ 0x28
 8000c44:	f000 fd6c 	bl	8001720 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	@ 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000c00 	.word	0x48000c00
 8000c54:	48000400 	.word	0x48000400

08000c58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f005 f814 	bl	8005c8e <osDelay>
 8000c66:	e7fb      	b.n	8000c60 <StartDefaultTask+0x8>

08000c68 <StartTaskBoatSM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBoatSM */
void StartTaskBoatSM(void *argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // TODO: maybe protect system information w/ mutex?
    switch (system_information.boat_state)
 8000c70:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d8fb      	bhi.n	8000c70 <StartTaskBoatSM+0x8>
 8000c78:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <StartTaskBoatSM+0x18>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cf3 	.word	0x08000cf3
 8000c8c:	08000d03 	.word	0x08000d03
    {
		case kBoatIdle:
			// Stopped exit: User input applied (i.e. gas pedal)
			if (system_information.control_active)
 8000c90:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d046      	beq.n	8000d26 <StartTaskBoatSM+0xbe>
			{
				system_information.boat_state = kBoatDriving;
 8000c98:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
				osThreadFlagsSet(readMotorTaskHandle, THREAD_FLAG_DRIVING);
 8000c9e:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <StartTaskBoatSM+0xd4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 ff23 	bl	8005af0 <osThreadFlagsSet>
			}
      break;
 8000caa:	e03c      	b.n	8000d26 <StartTaskBoatSM+0xbe>
    case kBoatDriving:
      // Driving exit: User input removed
      //               Collision detected or depth exceeded -> anchored
      if (!system_information.control_active)
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cae:	785b      	ldrb	r3, [r3, #1]
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d009      	beq.n	8000cce <StartTaskBoatSM+0x66>
      {
        // Clear flags
        osThreadFlagsSet(readMotorTaskHandle, 0x0);
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <StartTaskBoatSM+0xd4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 ff15 	bl	8005af0 <osThreadFlagsSet>

        // If no control is active, return to "idle" state
        system_information.boat_state = kBoatIdle;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
        osThreadFlagsSet(readMotorTaskHandle, 0x0);

        // If an error occurs (i.e. collision detection or depth exceeded), 
        system_information.boat_state = kBoatError;
      }
      break;
 8000ccc:	e02d      	b.n	8000d2a <StartTaskBoatSM+0xc2>
      else if (system_information.collision_detected || system_information.depth_exceeded)
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cd0:	789b      	ldrb	r3, [r3, #2]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <StartTaskBoatSM+0x76>
 8000cd6:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cd8:	78db      	ldrb	r3, [r3, #3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d025      	beq.n	8000d2a <StartTaskBoatSM+0xc2>
        osThreadFlagsSet(readMotorTaskHandle, 0x0);
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <StartTaskBoatSM+0xd4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 ff03 	bl	8005af0 <osThreadFlagsSet>
        system_information.boat_state = kBoatError;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
      break;
 8000cf0:	e01b      	b.n	8000d2a <StartTaskBoatSM+0xc2>
    case kBoatAnchored:
      if (system_information.anchor_lifted)
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cf4:	791b      	ldrb	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d019      	beq.n	8000d2e <StartTaskBoatSM+0xc6>
      {
        // Once the anchor is listed, we now move back to "idle" state
        system_information.boat_state = kBoatIdle;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000d00:	e015      	b.n	8000d2e <StartTaskBoatSM+0xc6>
    case kBoatError:
      if (!system_information.collision_detected && !system_information.depth_exceeded)
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000d04:	789b      	ldrb	r3, [r3, #2]
 8000d06:	f083 0301 	eor.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d010      	beq.n	8000d32 <StartTaskBoatSM+0xca>
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000d12:	78db      	ldrb	r3, [r3, #3]
 8000d14:	f083 0301 	eor.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d009      	beq.n	8000d32 <StartTaskBoatSM+0xca>
      {
        // If error conditions have cleared, return to "idle" state
        system_information.boat_state = kBoatIdle;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <StartTaskBoatSM+0xd0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000d24:	e005      	b.n	8000d32 <StartTaskBoatSM+0xca>
      break;
 8000d26:	bf00      	nop
 8000d28:	e7a2      	b.n	8000c70 <StartTaskBoatSM+0x8>
      break;
 8000d2a:	bf00      	nop
 8000d2c:	e7a0      	b.n	8000c70 <StartTaskBoatSM+0x8>
      break;
 8000d2e:	bf00      	nop
 8000d30:	e79e      	b.n	8000c70 <StartTaskBoatSM+0x8>
      break;
 8000d32:	bf00      	nop
 8000d34:	e79c      	b.n	8000c70 <StartTaskBoatSM+0x8>
 8000d36:	bf00      	nop
 8000d38:	20001054 	.word	0x20001054
 8000d3c:	20000b90 	.word	0x20000b90

08000d40 <StartTaskDepthDetect>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDepthDetect */
void StartTaskDepthDetect(void *argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDepthDetect */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f004 ffa0 	bl	8005c8e <osDelay>
 8000d4e:	e7fb      	b.n	8000d48 <StartTaskDepthDetect+0x8>

08000d50 <StartTaskReadMotorCommands>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadMotorCommands */
void StartTaskReadMotorCommands(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  BoatCommand_t command;
  /* Infinite loop */
  for(;;)
  {
    // Wait for flags to clear
    osThreadFlagsWait(THREAD_FLAG_DRIVING, osFlagsNoClear, osWaitForever);
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f004 ff14 	bl	8005b8c <osThreadFlagsWait>
    if (osMessageQueueGet(queueBoatCommandHandle, (void *)&command, NULL, osWaitForever) == osOK)
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <StartTaskReadMotorCommands+0x28>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2200      	movs	r2, #0
 8000d72:	f005 f81b 	bl	8005dac <osMessageQueueGet>
    osThreadFlagsWait(THREAD_FLAG_DRIVING, osFlagsNoClear, osWaitForever);
 8000d76:	e7ef      	b.n	8000d58 <StartTaskReadMotorCommands+0x8>
 8000d78:	20001050 	.word	0x20001050

08000d7c <StartTaskSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSendData */
void StartTaskSendData(void *argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSendData */
  /* Infinite loop */
  for(;;)
  {
    // TODO: broadcast info over 
    osDelay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f004 ff82 	bl	8005c8e <osDelay>
 8000d8a:	e7fb      	b.n	8000d84 <StartTaskSendData+0x8>

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f000 fba7 	bl	80014f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40001000 	.word	0x40001000

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f06f 0001 	mvn.w	r0, #1
 8000dfa:	f000 fc75 	bl	80016e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2288      	movs	r2, #136	@ 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 fed3 	bl	8008bd8 <memset>
  if(DFSDM1_Init == 0)
 8000e32:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d142      	bne.n	8000ec0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 f9be 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e56:	f7ff ffab 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a15      	ldr	r2, [pc, #84]	@ (8000ecc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e8a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eaa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000eb2:	f000 fdcf 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a02      	ldr	r2, [pc, #8]	@ (8000ec8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ebe:	6013      	str	r3, [r2, #0]
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	37b0      	adds	r7, #176	@ 0xb0
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000106c 	.word	0x2000106c
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48001000 	.word	0x48001000

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2288      	movs	r2, #136	@ 0x88
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fe6f 	bl	8008bd8 <memset>
  if(hi2c->Instance==I2C2)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_I2C_MspInit+0xb0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d13b      	bne.n	8000f7c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f95b 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f1c:	f7ff ff48 	bl	8000db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_I2C_MspInit+0xb4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <HAL_I2C_MspInit+0xb4>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_I2C_MspInit+0xb4>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f40:	2312      	movs	r3, #18
 8000f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f52:	2304      	movs	r3, #4
 8000f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <HAL_I2C_MspInit+0xb8>)
 8000f60:	f000 fd78 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <HAL_I2C_MspInit+0xb4>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f68:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <HAL_I2C_MspInit+0xb4>)
 8000f6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_I2C_MspInit+0xb4>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	37b0      	adds	r7, #176	@ 0xb0
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005800 	.word	0x40005800
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400

08000f90 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a17      	ldr	r2, [pc, #92]	@ (800100c <HAL_QSPI_MspInit+0x7c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d128      	bne.n	8001004 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_QSPI_MspInit+0x80>)
 8000fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fb6:	4a16      	ldr	r2, [pc, #88]	@ (8001010 <HAL_QSPI_MspInit+0x80>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_QSPI_MspInit+0x80>)
 8000fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_QSPI_MspInit+0x80>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <HAL_QSPI_MspInit+0x80>)
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_QSPI_MspInit+0x80>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000fe2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000fe6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <HAL_QSPI_MspInit+0x84>)
 8001000:	f000 fd28 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	@ 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	a0001000 	.word	0xa0001000
 8001010:	40021000 	.word	0x40021000
 8001014:	48001000 	.word	0x48001000

08001018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <HAL_SPI_MspInit+0x7c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d128      	bne.n	800108c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_SPI_MspInit+0x80>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <HAL_SPI_MspInit+0x80>)
 8001040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001044:	6593      	str	r3, [r2, #88]	@ 0x58
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_SPI_MspInit+0x80>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_SPI_MspInit+0x80>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_SPI_MspInit+0x80>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_SPI_MspInit+0x80>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800106a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800107c:	2306      	movs	r3, #6
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_SPI_MspInit+0x84>)
 8001088:	f000 fce4 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	@ 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40003c00 	.word	0x40003c00
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ac      	sub	sp, #176	@ 0xb0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2288      	movs	r2, #136	@ 0x88
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 fd89 	bl	8008bd8 <memset>
  if(huart->Instance==USART1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <HAL_UART_MspInit+0xc0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d142      	bne.n	8001156 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010d4:	2300      	movs	r3, #0
 80010d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 f875 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f7ff fe62 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_UART_MspInit+0xc4>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <HAL_UART_MspInit+0xc4>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HAL_UART_MspInit+0xc4>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <HAL_UART_MspInit+0xc4>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a16      	ldr	r2, [pc, #88]	@ (8001164 <HAL_UART_MspInit+0xc4>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <HAL_UART_MspInit+0xc4>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800111c:	23c0      	movs	r3, #192	@ 0xc0
 800111e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001134:	2307      	movs	r3, #7
 8001136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800113e:	4619      	mov	r1, r3
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <HAL_UART_MspInit+0xc8>)
 8001142:	f000 fc87 	bl	8001a54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	2025      	movs	r0, #37	@ 0x25
 800114c:	f000 facc 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001150:	2025      	movs	r0, #37	@ 0x25
 8001152:	f000 fae5 	bl	8001720 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	37b0      	adds	r7, #176	@ 0xb0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40013800 	.word	0x40013800
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ac      	sub	sp, #176	@ 0xb0
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2288      	movs	r2, #136	@ 0x88
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fd23 	bl	8008bd8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800119a:	d17c      	bne.n	8001296 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800119c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011b2:	2318      	movs	r3, #24
 80011b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fffd 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011d8:	f7ff fdea 	bl	8000db0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a2f      	ldr	r2, [pc, #188]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f000 fc1f 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001216:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800121a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001230:	230a      	movs	r3, #10
 8001232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001240:	f000 fc08 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	4a15      	ldr	r2, [pc, #84]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 800124a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800124e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d114      	bne.n	8001292 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001272:	6593      	str	r3, [r2, #88]	@ 0x58
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001280:	f001 f8a6 	bl	80023d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001288:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <HAL_PCD_MspInit+0x134>)
 800128a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001290:	e001      	b.n	8001296 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001292:	f001 f89d 	bl	80023d0 <HAL_PWREx_EnableVddUSB>
}
 8001296:	bf00      	nop
 8001298:	37b0      	adds	r7, #176	@ 0xb0
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <HAL_InitTick+0xe0>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	4a33      	ldr	r2, [pc, #204]	@ (8001384 <HAL_InitTick+0xe0>)
 80012b8:	f043 0310 	orr.w	r3, r3, #16
 80012bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012be:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <HAL_InitTick+0xe0>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ca:	f107 0210 	add.w	r2, r7, #16
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fee7 	bl	80030a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012e4:	f001 feb4 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 80012e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80012ea:	e004      	b.n	80012f6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012ec:	f001 feb0 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 80012f0:	4603      	mov	r3, r0
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f8:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <HAL_InitTick+0xe4>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	3b01      	subs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_InitTick+0xe8>)
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <HAL_InitTick+0xec>)
 8001308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_InitTick+0xe8>)
 800130c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001310:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001312:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_InitTick+0xe8>)
 8001314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001316:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <HAL_InitTick+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_InitTick+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_InitTick+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800132a:	4818      	ldr	r0, [pc, #96]	@ (800138c <HAL_InitTick+0xe8>)
 800132c:	f002 fcbd 	bl	8003caa <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001336:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11b      	bne.n	8001376 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800133e:	4813      	ldr	r0, [pc, #76]	@ (800138c <HAL_InitTick+0xe8>)
 8001340:	f002 fd14 	bl	8003d6c <HAL_TIM_Base_Start_IT>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800134a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800134e:	2b00      	cmp	r3, #0
 8001350:	d111      	bne.n	8001376 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001352:	2036      	movs	r0, #54	@ 0x36
 8001354:	f000 f9e4 	bl	8001720 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	d808      	bhi.n	8001370 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800135e:	2200      	movs	r2, #0
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	2036      	movs	r0, #54	@ 0x36
 8001364:	f000 f9c0 	bl	80016e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <HAL_InitTick+0xf0>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e002      	b.n	8001376 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001376:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800137a:	4618      	mov	r0, r3
 800137c:	3738      	adds	r7, #56	@ 0x38
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	431bde83 	.word	0x431bde83
 800138c:	20001070 	.word	0x20001070
 8001390:	40001000 	.word	0x40001000
 8001394:	20000004 	.word	0x20000004

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <UsageFault_Handler+0x4>

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013d2:	2020      	movs	r0, #32
 80013d4:	f000 fd00 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013d8:	2040      	movs	r0, #64	@ 0x40
 80013da:	f000 fcfd 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013de:	2080      	movs	r0, #128	@ 0x80
 80013e0:	f000 fcfa 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013e8:	f000 fcf6 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <USART1_IRQHandler+0x10>)
 80013f6:	f002 ff6b 	bl	80042d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000160 	.word	0x20000160

08001404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001408:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800140c:	f000 fce4 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001410:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001414:	f000 fce0 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001418:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800141c:	f000 fcdc 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001420:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001424:	f000 fcd8 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001428:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800142c:	f000 fcd4 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <TIM6_DAC_IRQHandler+0x10>)
 800143a:	f002 fd07 	bl	8003e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20001070 	.word	0x20001070

08001448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001470:	f7ff ffea 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	@ (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	@ (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f007 fba5 	bl	8008be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149e:	f7ff f80f 	bl	80004c0 <main>

080014a2 <LoopForever>:

LoopForever:
    b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014b0:	08008dfc 	.word	0x08008dfc
  ldr r2, =_sbss
 80014b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014b8:	200029ec 	.word	0x200029ec

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>

080014be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f902 	bl	80016d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fee8 	bl	80012a4 <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	e001      	b.n	80014e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e0:	f7ff fc6c 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	200010bc 	.word	0x200010bc

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200010bc 	.word	0x200010bc

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	@ (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	@ (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff4c 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fa:	f7ff ff61 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 80016fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff ffb1 	bl	800166c <NVIC_EncodePriority>
 800170a:	4602      	mov	r2, r0
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff80 	bl	8001618 <__NVIC_SetPriority>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff54 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0ac      	b.n	80018a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f8b2 	bl	80018bc <DFSDM_GetChannelFromInstance>
 8001758:	4603      	mov	r3, r0
 800175a:	4a55      	ldr	r2, [pc, #340]	@ (80018b0 <HAL_DFSDM_ChannelInit+0x174>)
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e09f      	b.n	80018a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fb4f 	bl	8000e0c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800176e:	4b51      	ldr	r3, [pc, #324]	@ (80018b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a4f      	ldr	r2, [pc, #316]	@ (80018b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001776:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001778:	4b4e      	ldr	r3, [pc, #312]	@ (80018b4 <HAL_DFSDM_ChannelInit+0x178>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d125      	bne.n	80017cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001780:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4c      	ldr	r2, [pc, #304]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001786:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800178a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800178c:	4b4a      	ldr	r3, [pc, #296]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4948      	ldr	r1, [pc, #288]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800179a:	4b47      	ldr	r3, [pc, #284]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a46      	ldr	r2, [pc, #280]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80017a0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80017a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017ae:	4b42      	ldr	r3, [pc, #264]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	493f      	ldr	r1, [pc, #252]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80017c0:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a3c      	ldr	r2, [pc, #240]	@ (80018b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80017c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80017ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80017da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 020f 	bic.w	r2, r2, #15
 8001808:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001830:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f002 0207 	and.w	r2, r2, #7
 800185c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001888:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f810 	bl	80018bc <DFSDM_GetChannelFromInstance>
 800189c:	4602      	mov	r2, r0
 800189e:	4904      	ldr	r1, [pc, #16]	@ (80018b0 <HAL_DFSDM_ChannelInit+0x174>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200010c4 	.word	0x200010c4
 80018b4:	200010c0 	.word	0x200010c0
 80018b8:	40016000 	.word	0x40016000

080018bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001938 <DFSDM_GetChannelFromInstance+0x7c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e02b      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a19      	ldr	r2, [pc, #100]	@ (800193c <DFSDM_GetChannelFromInstance+0x80>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d102      	bne.n	80018e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e024      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <DFSDM_GetChannelFromInstance+0x84>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d102      	bne.n	80018ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e01d      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a14      	ldr	r2, [pc, #80]	@ (8001944 <DFSDM_GetChannelFromInstance+0x88>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d102      	bne.n	80018fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e016      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <DFSDM_GetChannelFromInstance+0x8c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d102      	bne.n	800190a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001904:	2305      	movs	r3, #5
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e00f      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <DFSDM_GetChannelFromInstance+0x90>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d102      	bne.n	8001918 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001912:	2306      	movs	r3, #6
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e008      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <DFSDM_GetChannelFromInstance+0x94>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d102      	bne.n	8001926 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001920:	2307      	movs	r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e001      	b.n	800192a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001926:	2303      	movs	r3, #3
 8001928:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40016000 	.word	0x40016000
 800193c:	40016020 	.word	0x40016020
 8001940:	40016040 	.word	0x40016040
 8001944:	40016080 	.word	0x40016080
 8001948:	400160a0 	.word	0x400160a0
 800194c:	400160c0 	.word	0x400160c0
 8001950:	400160e0 	.word	0x400160e0

08001954 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d008      	beq.n	800197e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2204      	movs	r2, #4
 8001970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e022      	b.n	80019c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 020e 	bic.w	r2, r2, #14
 800198c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f003 021c 	and.w	r2, r3, #28
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d005      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2204      	movs	r2, #4
 80019ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e029      	b.n	8001a48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020e 	bic.w	r2, r2, #14
 8001a02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f003 021c 	and.w	r2, r3, #28
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
    }
  }
  return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e17f      	b.n	8001d64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8171 	beq.w	8001d5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x40>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 0201 	and.w	r2, r3, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d118      	bne.n	8001b34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80ac 	beq.w	8001d5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <HAL_GPIO_Init+0x330>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <HAL_GPIO_Init+0x330>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c12:	4b5c      	ldr	r3, [pc, #368]	@ (8001d84 <HAL_GPIO_Init+0x330>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d88 <HAL_GPIO_Init+0x334>)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x242>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <HAL_GPIO_Init+0x338>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x23e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <HAL_GPIO_Init+0x33c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x23a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <HAL_GPIO_Init+0x340>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x236>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	@ (8001d98 <HAL_GPIO_Init+0x344>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x232>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <HAL_GPIO_Init+0x348>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	@ (8001da0 <HAL_GPIO_Init+0x34c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x22a>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c96:	2300      	movs	r3, #0
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca8:	4937      	ldr	r1, [pc, #220]	@ (8001d88 <HAL_GPIO_Init+0x334>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae78 	bne.w	8001a64 <HAL_GPIO_Init+0x10>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000c00 	.word	0x48000c00
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	48001400 	.word	0x48001400
 8001da0:	48001800 	.word	0x48001800
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f806 	bl	8001e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e08d      	b.n	8001f4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f845 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2224      	movs	r2, #36	@ 0x24
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e006      	b.n	8001ea6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ea4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d108      	bne.n	8001ec0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	e007      	b.n	8001ed0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ece:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69d9      	ldr	r1, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d138      	bne.n	8001fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e032      	b.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	@ 0x24
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d139      	bne.n	8002074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800200a:	2302      	movs	r3, #2
 800200c:	e033      	b.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2224      	movs	r2, #36	@ 0x24
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800203c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af02      	add	r7, sp, #8
 8002088:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e101      	b.n	8002298 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff f85f 	bl	800116c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 f975 	bl	80053b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7c1a      	ldrb	r2, [r3, #16]
 80020ce:	f88d 2000 	strb.w	r2, [sp]
 80020d2:	3304      	adds	r3, #4
 80020d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d6:	f003 f93e 	bl	8005356 <USB_CoreInit>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0d5      	b.n	8002298 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f96d 	bl	80053d2 <USB_SetCurrentMode>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0c6      	b.n	8002298 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e04a      	b.n	80021a6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3315      	adds	r3, #21
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3314      	adds	r3, #20
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	b298      	uxth	r0, r3
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	332e      	adds	r3, #46	@ 0x2e
 800214c:	4602      	mov	r2, r0
 800214e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3318      	adds	r3, #24
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	331c      	adds	r3, #28
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3320      	adds	r3, #32
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3324      	adds	r3, #36	@ 0x24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	791b      	ldrb	r3, [r3, #4]
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3af      	bcc.n	8002110 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e044      	b.n	8002240 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	791b      	ldrb	r3, [r3, #4]
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3b5      	bcc.n	80021b6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7c1a      	ldrb	r2, [r3, #16]
 8002252:	f88d 2000 	strb.w	r2, [sp]
 8002256:	3304      	adds	r3, #4
 8002258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225a:	f003 f907 	bl	800546c <USB_DevInit>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e013      	b.n	8002298 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7b1b      	ldrb	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f80a 	bl	80022a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f003 faac 	bl	80057ee <USB_DevDisconnect>

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	f043 0303 	orr.w	r3, r3, #3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40007000 	.word	0x40007000

08002308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_PWREx_GetVoltageRange+0x18>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40007000 	.word	0x40007000

08002324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002332:	d130      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002334:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800233c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002340:	d038      	beq.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800234a:	4a1e      	ldr	r2, [pc, #120]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2232      	movs	r2, #50	@ 0x32
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9b      	lsrs	r3, r3, #18
 8002364:	3301      	adds	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002368:	e002      	b.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b01      	subs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237c:	d102      	bne.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f2      	bne.n	800236a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002390:	d110      	bne.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e00f      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a2:	d007      	beq.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ac:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40007000 	.word	0x40007000
 80023c8:	20000000 	.word	0x20000000
 80023cc:	431bde83 	.word	0x431bde83

080023d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023de:	6053      	str	r3, [r2, #4]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff f88e 	bl	8001518 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e063      	b.n	80024d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe fdb7 	bl	8000f90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002422:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f858 	bl	80024dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	3b01      	subs	r3, #1
 800243c:	021a      	lsls	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	2120      	movs	r1, #32
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f850 	bl	80024f8 <QSPI_WaitFlagStateUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d131      	bne.n	80024c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800246c:	f023 0310 	bic.w	r3, r3, #16
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6852      	ldr	r2, [r2, #4]
 8002474:	0611      	lsls	r1, r2, #24
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <HAL_QSPI_Init+0xe8>)
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6912      	ldr	r2, [r2, #16]
 8002492:	0411      	lsls	r1, r2, #16
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6952      	ldr	r2, [r2, #20]
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6992      	ldr	r2, [r2, #24]
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80024ce:	7afb      	ldrb	r3, [r7, #11]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	ffe0f8fe 	.word	0xffe0f8fe

080024dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002508:	e01a      	b.n	8002540 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d016      	beq.n	8002540 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002512:	f7ff f801 	bl	8001518 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	429a      	cmp	r2, r3
 8002520:	d302      	bcc.n	8002528 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2204      	movs	r2, #4
 800252c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e00e      	b.n	800255e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	429a      	cmp	r2, r3
 800255a:	d1d6      	bne.n	800250a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e3ca      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257a:	4b97      	ldr	r3, [pc, #604]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002584:	4b94      	ldr	r3, [pc, #592]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80e4 	beq.w	8002764 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4a>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	f040 808b 	bne.w	80026c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 8087 	bne.w	80026c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025b2:	4b89      	ldr	r3, [pc, #548]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_RCC_OscConfig+0x62>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e3a2      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	4b82      	ldr	r3, [pc, #520]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_RCC_OscConfig+0x7c>
 80025da:	4b7f      	ldr	r3, [pc, #508]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_OscConfig+0x88>
 80025e4:	4b7c      	ldr	r3, [pc, #496]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d223      	bcs.n	800263c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fd87 	bl	800310c <RCC_SetFlashLatencyFromMSIRange>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e383      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002608:	4b73      	ldr	r3, [pc, #460]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a72      	ldr	r2, [pc, #456]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b70      	ldr	r3, [pc, #448]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	496d      	ldr	r1, [pc, #436]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002626:	4b6c      	ldr	r3, [pc, #432]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	4968      	ldr	r1, [pc, #416]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e025      	b.n	8002688 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800263c:	4b66      	ldr	r3, [pc, #408]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a65      	ldr	r2, [pc, #404]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4960      	ldr	r1, [pc, #384]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800265a:	4b5f      	ldr	r3, [pc, #380]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	495b      	ldr	r1, [pc, #364]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fd47 	bl	800310c <RCC_SetFlashLatencyFromMSIRange>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e343      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002688:	f000 fc4a 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	4950      	ldr	r1, [pc, #320]	@ (80027dc <HAL_RCC_OscConfig+0x274>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	4a4e      	ldr	r2, [pc, #312]	@ (80027e0 <HAL_RCC_OscConfig+0x278>)
 80026a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026a8:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <HAL_RCC_OscConfig+0x27c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fdf9 	bl	80012a4 <HAL_InitTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d052      	beq.n	8002762 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	e327      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d032      	beq.n	800272e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026c8:	4b43      	ldr	r3, [pc, #268]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d4:	f7fe ff20 	bl	8001518 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026dc:	f7fe ff1c 	bl	8001518 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e310      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ee:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026fa:	4b37      	ldr	r3, [pc, #220]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a36      	ldr	r2, [pc, #216]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4931      	ldr	r1, [pc, #196]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002718:	4b2f      	ldr	r3, [pc, #188]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	492c      	ldr	r1, [pc, #176]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e01a      	b.n	8002764 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800272e:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a29      	ldr	r2, [pc, #164]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800273a:	f7fe feed 	bl	8001518 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002742:	f7fe fee9 	bl	8001518 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e2dd      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002754:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x1da>
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002762:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d074      	beq.n	800285a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x21a>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d10e      	bne.n	800279a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d10b      	bne.n	800279a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d064      	beq.n	8002858 <HAL_RCC_OscConfig+0x2f0>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d160      	bne.n	8002858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e2ba      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x24a>
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0b      	ldr	r2, [pc, #44]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e026      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ba:	d115      	bne.n	80027e8 <HAL_RCC_OscConfig+0x280>
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a05      	ldr	r2, [pc, #20]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80027c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a02      	ldr	r2, [pc, #8]	@ (80027d8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x298>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08008da4 	.word	0x08008da4
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004
 80027e8:	4ba0      	ldr	r3, [pc, #640]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a9f      	ldr	r2, [pc, #636]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b9d      	ldr	r3, [pc, #628]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a9c      	ldr	r2, [pc, #624]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fe86 	bl	8001518 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fe82 	bl	8001518 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e276      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002822:	4b92      	ldr	r3, [pc, #584]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x2a8>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fe72 	bl	8001518 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002838:	f7fe fe6e 	bl	8001518 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	@ 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e262      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x2d0>
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d060      	beq.n	8002928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d005      	beq.n	8002878 <HAL_RCC_OscConfig+0x310>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d116      	bne.n	80028a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002878:	4b7c      	ldr	r3, [pc, #496]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x328>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e23f      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b76      	ldr	r3, [pc, #472]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	4973      	ldr	r1, [pc, #460]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a4:	e040      	b.n	8002928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d023      	beq.n	80028f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ae:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fe2d 	bl	8001518 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fe29 	bl	8001518 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e21d      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d4:	4b65      	ldr	r3, [pc, #404]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4b62      	ldr	r3, [pc, #392]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	495f      	ldr	r1, [pc, #380]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
 80028f4:	e018      	b.n	8002928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80028fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fe09 	bl	8001518 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe fe05 	bl	8001518 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1f9      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03c      	beq.n	80029ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 800293e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002942:	4a4a      	ldr	r2, [pc, #296]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fde4 	bl	8001518 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fde0 	bl	8001518 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e1d4      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002966:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCC_OscConfig+0x3ec>
 8002974:	e01b      	b.n	80029ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002976:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe fdc7 	bl	8001518 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298e:	f7fe fdc3 	bl	8001518 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1b7      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ef      	bne.n	800298e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80a6 	beq.w	8002b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029c0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10d      	bne.n	80029e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d8:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e4:	2301      	movs	r3, #1
 80029e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_RCC_OscConfig+0x508>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d118      	bne.n	8002a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <HAL_RCC_OscConfig+0x508>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <HAL_RCC_OscConfig+0x508>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fd8a 	bl	8001518 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7fe fd86 	bl	8001518 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e17a      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_RCC_OscConfig+0x508>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d108      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4d8>
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	4a0d      	ldr	r2, [pc, #52]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a3e:	e029      	b.n	8002a94 <HAL_RCC_OscConfig+0x52c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d115      	bne.n	8002a74 <HAL_RCC_OscConfig+0x50c>
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	4a03      	ldr	r2, [pc, #12]	@ (8002a6c <HAL_RCC_OscConfig+0x504>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_OscConfig+0x52c>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	4b9c      	ldr	r3, [pc, #624]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a84:	4b98      	ldr	r3, [pc, #608]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	4a97      	ldr	r2, [pc, #604]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fd3c 	bl	8001518 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fd38 	bl	8001518 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e12a      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ed      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x53c>
 8002ac8:	e015      	b.n	8002af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7fe fd25 	bl	8001518 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fd21 	bl	8001518 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e113      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ed      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af6:	7ffb      	ldrb	r3, [r7, #31]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	4a79      	ldr	r2, [pc, #484]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80fe 	beq.w	8002d0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	f040 80d0 	bne.w	8002cbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b1c:	4b72      	ldr	r3, [pc, #456]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d130      	bne.n	8002b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d127      	bne.n	8002b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d11f      	bne.n	8002b92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b5c:	2a07      	cmp	r2, #7
 8002b5e:	bf14      	ite	ne
 8002b60:	2201      	movne	r2, #1
 8002b62:	2200      	moveq	r2, #0
 8002b64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d113      	bne.n	8002b92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d06e      	beq.n	8002c70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d069      	beq.n	8002c6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ba4:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0ad      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bc0:	f7fe fcaa 	bl	8001518 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fca6 	bl	8001518 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e09a      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bda:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be6:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <HAL_RCC_OscConfig+0x784>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c00:	0212      	lsls	r2, r2, #8
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c08:	0852      	lsrs	r2, r2, #1
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0552      	lsls	r2, r2, #21
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0652      	lsls	r2, r2, #25
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c20:	0912      	lsrs	r2, r2, #4
 8002c22:	0452      	lsls	r2, r2, #17
 8002c24:	430a      	orrs	r2, r1
 8002c26:	4930      	ldr	r1, [pc, #192]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c44:	f7fe fc68 	bl	8001518 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fc64 	bl	8001518 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e058      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c6a:	e050      	b.n	8002d0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e04f      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d148      	bne.n	8002d0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c88:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c94:	f7fe fc40 	bl	8001518 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fc3c 	bl	8001518 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e030      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x734>
 8002cba:	e028      	b.n	8002d0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d023      	beq.n	8002d0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <HAL_RCC_OscConfig+0x780>)
 8002cc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fc23 	bl	8001518 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fc1f 	bl	8001518 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d905      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e013      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_OscConfig+0x7b0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ec      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_RCC_OscConfig+0x7b0>)
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	4905      	ldr	r1, [pc, #20]	@ (8002d18 <HAL_RCC_OscConfig+0x7b0>)
 8002d02:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_RCC_OscConfig+0x7b4>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	60cb      	str	r3, [r1, #12]
 8002d08:	e001      	b.n	8002d0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	feeefffc 	.word	0xfeeefffc

08002d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0e7      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b75      	ldr	r3, [pc, #468]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d910      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b72      	ldr	r3, [pc, #456]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4970      	ldr	r1, [pc, #448]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b6e      	ldr	r3, [pc, #440]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0cf      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d908      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b63      	ldr	r3, [pc, #396]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4960      	ldr	r1, [pc, #384]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04c      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d121      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0a6      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dbe:	4b54      	ldr	r3, [pc, #336]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e09a      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e08e      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e086      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b46      	ldr	r3, [pc, #280]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4943      	ldr	r1, [pc, #268]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e08:	f7fe fb86 	bl	8001518 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe fb82 	bl	8001518 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e06e      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b3a      	ldr	r3, [pc, #232]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d208      	bcs.n	8002e66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e54:	4b2e      	ldr	r3, [pc, #184]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	492b      	ldr	r1, [pc, #172]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e66:	4b29      	ldr	r3, [pc, #164]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d210      	bcs.n	8002e96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e74:	4b25      	ldr	r3, [pc, #148]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 0207 	bic.w	r2, r3, #7
 8002e7c:	4923      	ldr	r1, [pc, #140]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e84:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <HAL_RCC_ClockConfig+0x1ec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e036      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4918      	ldr	r1, [pc, #96]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4910      	ldr	r1, [pc, #64]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ed4:	f000 f824 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	490b      	ldr	r1, [pc, #44]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f4>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	4a09      	ldr	r2, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_ClockConfig+0x1fc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe f9d3 	bl	80012a4 <HAL_InitTick>
 8002efe:	4603      	mov	r3, r0
 8002f00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08008da4 	.word	0x08008da4
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f38:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x34>
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d121      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d11e      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f54:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f60:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e005      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f70:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800302c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10d      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d102      	bne.n	8002f9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f98:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e004      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d134      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d003      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0xac>
 8002fc4:	e005      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fc8:	617b      	str	r3, [r7, #20]
      break;
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fce:	617b      	str	r3, [r7, #20]
      break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	617b      	str	r3, [r7, #20]
      break;
 8002fd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fe6:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	fb03 f202 	mul.w	r2, r3, r2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x108>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	0e5b      	lsrs	r3, r3, #25
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	3301      	adds	r3, #1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003018:	69bb      	ldr	r3, [r7, #24]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3724      	adds	r7, #36	@ 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	08008dbc 	.word	0x08008dbc
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4904      	ldr	r1, [pc, #16]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	08008db4 	.word	0x08008db4

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003080:	f7ff ffda 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0adb      	lsrs	r3, r3, #11
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08008db4 	.word	0x08008db4

080030a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	220f      	movs	r2, #15
 80030b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030b8:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_RCC_GetClockConfig+0x5c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0203 	and.w	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <HAL_RCC_GetClockConfig+0x5c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_GetClockConfig+0x5c>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <HAL_RCC_GetClockConfig+0x60>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	40022000 	.word	0x40022000

0800310c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003118:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003124:	f7ff f8f0 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 8003128:	6178      	str	r0, [r7, #20]
 800312a:	e014      	b.n	8003156 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	4a24      	ldr	r2, [pc, #144]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	@ 0x58
 8003138:	4b22      	ldr	r3, [pc, #136]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003144:	f7ff f8e0 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 8003148:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315c:	d10b      	bne.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b80      	cmp	r3, #128	@ 0x80
 8003162:	d919      	bls.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2ba0      	cmp	r3, #160	@ 0xa0
 8003168:	d902      	bls.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800316a:	2302      	movs	r3, #2
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e013      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003170:	2301      	movs	r3, #1
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e010      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b80      	cmp	r3, #128	@ 0x80
 800317a:	d902      	bls.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800317c:	2303      	movs	r3, #3
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e00a      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	d102      	bne.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003188:	2302      	movs	r3, #2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e004      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d101      	bne.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003194:	2301      	movs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 0207 	bic.w	r2, r3, #7
 80031a0:	4909      	ldr	r1, [pc, #36]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a8:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40022000 	.word	0x40022000

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d4:	2300      	movs	r3, #0
 80031d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d8:	2300      	movs	r3, #0
 80031da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d041      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031f0:	d02a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031f6:	d824      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fc:	d008      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003202:	d81e      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800320c:	d010      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800320e:	e018      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003210:	4b86      	ldr	r3, [pc, #536]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a85      	ldr	r2, [pc, #532]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321c:	e015      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f000 facb 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322e:	e00c      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3320      	adds	r3, #32
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fbb6 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	74fb      	strb	r3, [r7, #19]
      break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003250:	4b76      	ldr	r3, [pc, #472]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325e:	4973      	ldr	r1, [pc, #460]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d041      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003280:	d02a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003282:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003286:	d824      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800328c:	d008      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800328e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003292:	d81e      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800329c:	d010      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329e:	e018      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a0:	4b62      	ldr	r3, [pc, #392]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a61      	ldr	r2, [pc, #388]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ac:	e015      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fa83 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032be:	e00c      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3320      	adds	r3, #32
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb6e 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	74fb      	strb	r3, [r7, #19]
      break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e0:	4b52      	ldr	r3, [pc, #328]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ee:	494f      	ldr	r1, [pc, #316]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032f6:	e001      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a0 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330e:	4b47      	ldr	r3, [pc, #284]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	4a40      	ldr	r2, [pc, #256]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003330:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333c:	2301      	movs	r3, #1
 800333e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003340:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3a      	ldr	r2, [pc, #232]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334c:	f7fe f8e4 	bl	8001518 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003352:	e009      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe f8e0 	bl	8001518 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	74fb      	strb	r3, [r7, #19]
        break;
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003368:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d15c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800337a:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003384:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01f      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d019      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003398:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	4a20      	ldr	r2, [pc, #128]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c4:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe f89f 	bl	8001518 <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033dc:	e00b      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe f89b 	bl	8001518 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d902      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	74fb      	strb	r3, [r7, #19]
            break;
 80033f4:	e006      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ec      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341a:	4904      	ldr	r1, [pc, #16]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003422:	e009      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003438:	7c7b      	ldrb	r3, [r7, #17]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b9e      	ldr	r3, [pc, #632]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	4a9d      	ldr	r2, [pc, #628]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003456:	4b98      	ldr	r3, [pc, #608]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f023 0203 	bic.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	4994      	ldr	r1, [pc, #592]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003478:	4b8f      	ldr	r3, [pc, #572]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f023 020c 	bic.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	498c      	ldr	r1, [pc, #560]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349a:	4b87      	ldr	r3, [pc, #540]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	4983      	ldr	r1, [pc, #524]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034bc:	4b7e      	ldr	r3, [pc, #504]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	497b      	ldr	r1, [pc, #492]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034de:	4b76      	ldr	r3, [pc, #472]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ec:	4972      	ldr	r1, [pc, #456]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003500:	4b6d      	ldr	r3, [pc, #436]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	496a      	ldr	r1, [pc, #424]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b65      	ldr	r3, [pc, #404]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	4961      	ldr	r1, [pc, #388]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003544:	4b5c      	ldr	r3, [pc, #368]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	4959      	ldr	r1, [pc, #356]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b54      	ldr	r3, [pc, #336]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	4950      	ldr	r1, [pc, #320]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003588:	4b4b      	ldr	r3, [pc, #300]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	4948      	ldr	r1, [pc, #288]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035aa:	4b43      	ldr	r3, [pc, #268]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	493f      	ldr	r1, [pc, #252]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d028      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035cc:	4b3a      	ldr	r3, [pc, #232]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035da:	4937      	ldr	r1, [pc, #220]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ea:	d106      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b32      	ldr	r3, [pc, #200]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a31      	ldr	r2, [pc, #196]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	e011      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003602:	d10c      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f8d8 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d028      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362a:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003630:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	491f      	ldr	r1, [pc, #124]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003648:	d106      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364a:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a1a      	ldr	r2, [pc, #104]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003654:	60d3      	str	r3, [r2, #12]
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003660:	d10c      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f8a9 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02b      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003696:	4908      	ldr	r1, [pc, #32]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a6:	d109      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a02      	ldr	r2, [pc, #8]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	e014      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f877 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02f      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ec:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fa:	4928      	ldr	r1, [pc, #160]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f854 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d014      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
 8003726:	e011      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3320      	adds	r3, #32
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f935 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003766:	490d      	ldr	r1, [pc, #52]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378a:	4904      	ldr	r1, [pc, #16]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003792:	7cbb      	ldrb	r3, [r7, #18]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ce:	4b75      	ldr	r3, [pc, #468]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037da:	4b72      	ldr	r3, [pc, #456]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d10d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
       ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037f2:	4b6c      	ldr	r3, [pc, #432]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
       ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d047      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	e044      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d018      	beq.n	8003846 <RCCEx_PLLSAI1_Config+0x86>
 8003814:	2b03      	cmp	r3, #3
 8003816:	d825      	bhi.n	8003864 <RCCEx_PLLSAI1_Config+0xa4>
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <RCCEx_PLLSAI1_Config+0x62>
 800381c:	2b02      	cmp	r3, #2
 800381e:	d009      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x74>
 8003820:	e020      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003822:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e01a      	b.n	800386a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003834:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e013      	b.n	800386e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003852:	4b54      	ldr	r3, [pc, #336]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003862:	e006      	b.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e004      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003872:	bf00      	nop
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	430b      	orrs	r3, r1
 8003890:	4944      	ldr	r1, [pc, #272]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d17d      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800389c:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a40      	ldr	r2, [pc, #256]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fd fe36 	bl	8001518 <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ae:	e009      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b0:	f7fd fe32 	bl	8001518 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	73fb      	strb	r3, [r7, #15]
        break;
 80038c2:	e005      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c4:	4b37      	ldr	r3, [pc, #220]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ef      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d160      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038dc:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	0211      	lsls	r1, r2, #8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	0912      	lsrs	r2, r2, #4
 80038f4:	0452      	lsls	r2, r2, #17
 80038f6:	430a      	orrs	r2, r1
 80038f8:	492a      	ldr	r1, [pc, #168]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
 80038fe:	e027      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d112      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003906:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800390e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6892      	ldr	r2, [r2, #8]
 8003916:	0211      	lsls	r1, r2, #8
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6912      	ldr	r2, [r2, #16]
 800391c:	0852      	lsrs	r2, r2, #1
 800391e:	3a01      	subs	r2, #1
 8003920:	0552      	lsls	r2, r2, #21
 8003922:	430a      	orrs	r2, r1
 8003924:	491f      	ldr	r1, [pc, #124]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
 800392a:	e011      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003934:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	0211      	lsls	r1, r2, #8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6952      	ldr	r2, [r2, #20]
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0652      	lsls	r2, r2, #25
 8003948:	430a      	orrs	r2, r1
 800394a:	4916      	ldr	r1, [pc, #88]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800395a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fddc 	bl	8001518 <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003962:	e009      	b.n	8003978 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003964:	f7fd fdd8 	bl	8001518 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	73fb      	strb	r3, [r7, #15]
          break;
 8003976:	e005      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ef      	beq.n	8003964 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000

080039a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039c2:	4b67      	ldr	r3, [pc, #412]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d10d      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
       ||
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039da:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d047      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e044      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d018      	beq.n	8003a2e <RCCEx_PLLSAI2_Config+0x86>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d825      	bhi.n	8003a4c <RCCEx_PLLSAI2_Config+0xa4>
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d002      	beq.n	8003a0a <RCCEx_PLLSAI2_Config+0x62>
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d009      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x74>
 8003a08:	e020      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0a:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e01a      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a1c:	4b50      	ldr	r3, [pc, #320]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e013      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3a:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4a:	e006      	b.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e004      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a62:	4b3f      	ldr	r3, [pc, #252]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	430b      	orrs	r3, r1
 8003a78:	4939      	ldr	r1, [pc, #228]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d167      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a35      	ldr	r2, [pc, #212]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fd fd42 	bl	8001518 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a98:	f7fd fd3e 	bl	8001518 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aac:	4b2c      	ldr	r3, [pc, #176]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ef      	bne.n	8003a98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d14a      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac4:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6892      	ldr	r2, [r2, #8]
 8003ad4:	0211      	lsls	r1, r2, #8
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	0912      	lsrs	r2, r2, #4
 8003adc:	0452      	lsls	r2, r2, #17
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	491f      	ldr	r1, [pc, #124]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	614b      	str	r3, [r1, #20]
 8003ae6:	e011      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003af0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6912      	ldr	r2, [r2, #16]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0652      	lsls	r2, r2, #25
 8003b04:	430a      	orrs	r2, r1
 8003b06:	4916      	ldr	r1, [pc, #88]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fcfe 	bl	8001518 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b20:	f7fd fcfa 	bl	8001518 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
          break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e095      	b.n	8003ca2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b86:	d009      	beq.n	8003b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	61da      	str	r2, [r3, #28]
 8003b8e:	e005      	b.n	8003b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fa2e 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bdc:	d902      	bls.n	8003be4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e002      	b.n	8003bea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003bf2:	d007      	beq.n	8003c04 <HAL_SPI_Init+0xa0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	ea42 0103 	orr.w	r1, r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 0204 	and.w	r2, r3, #4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e049      	b.n	8003d50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f841 	bl	8003d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f000 f9df 	bl	80040ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e04f      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01d      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x76>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dae:	d018      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x76>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x76>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x76>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x76>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x76>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d115      	bne.n	8003e0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b06      	cmp	r3, #6
 8003df2:	d015      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0xb4>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfa:	d011      	beq.n	8003e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	e008      	b.n	8003e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e000      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40013400 	.word	0x40013400
 8003e44:	40014000 	.word	0x40014000
 8003e48:	00010007 	.word	0x00010007

08003e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0202 	mvn.w	r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f8e9 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8db 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8ec 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0204 	mvn.w	r2, #4
 8003ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8c3 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8b5 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8c6 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d020      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0208 	mvn.w	r2, #8
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f89d 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f88f 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f8a0 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f877 	bl	800406e <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f869 	bl	800405a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f87a 	bl	8004082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0201 	mvn.w	r2, #1
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fc feea 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f913 	bl	800420c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f90b 	bl	8004220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f834 	bl	8004096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0220 	mvn.w	r2, #32
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f8d3 	bl	80041f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a46      	ldr	r2, [pc, #280]	@ (80041d8 <TIM_Base_SetConfig+0x12c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a43      	ldr	r2, [pc, #268]	@ (80041dc <TIM_Base_SetConfig+0x130>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a42      	ldr	r2, [pc, #264]	@ (80041e0 <TIM_Base_SetConfig+0x134>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a41      	ldr	r2, [pc, #260]	@ (80041e4 <TIM_Base_SetConfig+0x138>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a40      	ldr	r2, [pc, #256]	@ (80041e8 <TIM_Base_SetConfig+0x13c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a35      	ldr	r2, [pc, #212]	@ (80041d8 <TIM_Base_SetConfig+0x12c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410c:	d01b      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a32      	ldr	r2, [pc, #200]	@ (80041dc <TIM_Base_SetConfig+0x130>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d017      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a31      	ldr	r2, [pc, #196]	@ (80041e0 <TIM_Base_SetConfig+0x134>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a30      	ldr	r2, [pc, #192]	@ (80041e4 <TIM_Base_SetConfig+0x138>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2f      	ldr	r2, [pc, #188]	@ (80041e8 <TIM_Base_SetConfig+0x13c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2e      	ldr	r2, [pc, #184]	@ (80041ec <TIM_Base_SetConfig+0x140>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2d      	ldr	r2, [pc, #180]	@ (80041f0 <TIM_Base_SetConfig+0x144>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0x9a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2c      	ldr	r2, [pc, #176]	@ (80041f4 <TIM_Base_SetConfig+0x148>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <TIM_Base_SetConfig+0x12c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00f      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <TIM_Base_SetConfig+0x13c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a17      	ldr	r2, [pc, #92]	@ (80041ec <TIM_Base_SetConfig+0x140>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a16      	ldr	r2, [pc, #88]	@ (80041f0 <TIM_Base_SetConfig+0x144>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0xf8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a15      	ldr	r2, [pc, #84]	@ (80041f4 <TIM_Base_SetConfig+0x148>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d103      	bne.n	80041ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]
  }
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800

080041f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e040      	b.n	80042c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc ff22 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe06 	bl	8004e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb4b 	bl	800491c <UART_SetConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e01b      	b.n	80042c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800429e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fe85 	bl	8004fd0 <UART_CheckIdleState>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b0ba      	sub	sp, #232	@ 0xe8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042fe:	4013      	ands	r3, r2
 8004300:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d115      	bne.n	8004338 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00f      	beq.n	8004338 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 82ca 	beq.w	80048c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
      }
      return;
 8004336:	e2c4      	b.n	80048c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8117 	beq.w	8004570 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800434e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004352:	4b85      	ldr	r3, [pc, #532]	@ (8004568 <HAL_UART_IRQHandler+0x298>)
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 810a 	beq.w	8004570 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800435c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d011      	beq.n	800438c <HAL_UART_IRQHandler+0xbc>
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2201      	movs	r2, #1
 800437a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800438c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d011      	beq.n	80043bc <HAL_UART_IRQHandler+0xec>
 8004398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00b      	beq.n	80043bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2202      	movs	r2, #2
 80043aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d011      	beq.n	80043ec <HAL_UART_IRQHandler+0x11c>
 80043c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2204      	movs	r2, #4
 80043da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e2:	f043 0202 	orr.w	r2, r3, #2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004408:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800441e:	f043 0208 	orr.w	r2, r3, #8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004430:	2b00      	cmp	r3, #0
 8004432:	d012      	beq.n	800445a <HAL_UART_IRQHandler+0x18a>
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004438:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00c      	beq.n	800445a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8230 	beq.w	80048c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d005      	beq.n	80044b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04f      	beq.n	8004552 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fea1 	bl	80051fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b40      	cmp	r3, #64	@ 0x40
 80044c4:	d141      	bne.n	800454a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800450a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1d9      	bne.n	80044c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004516:	2b00      	cmp	r3, #0
 8004518:	d013      	beq.n	8004542 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451e:	4a13      	ldr	r2, [pc, #76]	@ (800456c <HAL_UART_IRQHandler+0x29c>)
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fa52 	bl	80019d0 <HAL_DMA_Abort_IT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d017      	beq.n	8004562 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	e00f      	b.n	8004562 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9d4 	bl	80048f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	e00b      	b.n	8004562 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f9d0 	bl	80048f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	e007      	b.n	8004562 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9cc 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004560:	e1b1      	b.n	80048c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004562:	bf00      	nop
    return;
 8004564:	e1af      	b.n	80048c6 <HAL_UART_IRQHandler+0x5f6>
 8004566:	bf00      	nop
 8004568:	04000120 	.word	0x04000120
 800456c:	080052c3 	.word	0x080052c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 816a 	bne.w	800484e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8163 	beq.w	800484e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 815c 	beq.w	800484e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	2b40      	cmp	r3, #64	@ 0x40
 80045aa:	f040 80d4 	bne.w	8004756 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80ad 	beq.w	800471e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ce:	429a      	cmp	r2, r3
 80045d0:	f080 80a5 	bcs.w	800471e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 8086 	bne.w	80046fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004604:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800460c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800461a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800461e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004626:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1da      	bne.n	80045f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800464a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800465e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004662:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004666:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e1      	bne.n	800463a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800468c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800469a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800469c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e3      	bne.n	8004676 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046cc:	f023 0310 	bic.w	r3, r3, #16
 80046d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e4      	bne.n	80046bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd f92c 	bl	8001954 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800470e:	b29b      	uxth	r3, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	b29b      	uxth	r3, r3
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8f4 	bl	8004904 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800471c:	e0d5      	b.n	80048ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004724:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004728:	429a      	cmp	r2, r3
 800472a:	f040 80ce 	bne.w	80048ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	f040 80c5 	bne.w	80048ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8d8 	bl	8004904 <HAL_UARTEx_RxEventCallback>
      return;
 8004754:	e0b9      	b.n	80048ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004762:	b29b      	uxth	r3, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80ab 	beq.w	80048ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a6 	beq.w	80048ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004792:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004796:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e4      	bne.n	8004782 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	623b      	str	r3, [r7, #32]
   return(result);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e3      	bne.n	80047b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	60fb      	str	r3, [r7, #12]
   return(result);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f023 0310 	bic.w	r3, r3, #16
 8004818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	69b9      	ldr	r1, [r7, #24]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	617b      	str	r3, [r7, #20]
   return(result);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e4      	bne.n	8004804 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f85c 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800484c:	e03f      	b.n	80048ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <HAL_UART_IRQHandler+0x5a8>
 800485a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800486e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fd66 	bl	8005342 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004876:	e02d      	b.n	80048d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01c      	beq.n	80048d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
    }
    return;
 80048a0:	e017      	b.n	80048d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_UART_IRQHandler+0x604>
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fd17 	bl	80052ee <UART_EndTransmit_IT>
    return;
 80048c0:	e008      	b.n	80048d4 <HAL_UART_IRQHandler+0x604>
      return;
 80048c2:	bf00      	nop
 80048c4:	e006      	b.n	80048d4 <HAL_UART_IRQHandler+0x604>
    return;
 80048c6:	bf00      	nop
 80048c8:	e004      	b.n	80048d4 <HAL_UART_IRQHandler+0x604>
      return;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <HAL_UART_IRQHandler+0x604>
      return;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_UART_IRQHandler+0x604>
    return;
 80048d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048d4:	37e8      	adds	r7, #232	@ 0xe8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop

080048dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	b08a      	sub	sp, #40	@ 0x28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	431a      	orrs	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4ba4      	ldr	r3, [pc, #656]	@ (8004bdc <UART_SetConfig+0x2c0>)
 800494c:	4013      	ands	r3, r2
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004954:	430b      	orrs	r3, r1
 8004956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a99      	ldr	r2, [pc, #612]	@ (8004be0 <UART_SetConfig+0x2c4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004984:	4313      	orrs	r3, r2
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	430a      	orrs	r2, r1
 800499a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a90      	ldr	r2, [pc, #576]	@ (8004be4 <UART_SetConfig+0x2c8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d126      	bne.n	80049f4 <UART_SetConfig+0xd8>
 80049a6:	4b90      	ldr	r3, [pc, #576]	@ (8004be8 <UART_SetConfig+0x2cc>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d81b      	bhi.n	80049ec <UART_SetConfig+0xd0>
 80049b4:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <UART_SetConfig+0xa0>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049cd 	.word	0x080049cd
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	080049d5 	.word	0x080049d5
 80049c8:	080049e5 	.word	0x080049e5
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e116      	b.n	8004c02 <UART_SetConfig+0x2e6>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e112      	b.n	8004c02 <UART_SetConfig+0x2e6>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e10e      	b.n	8004c02 <UART_SetConfig+0x2e6>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e10a      	b.n	8004c02 <UART_SetConfig+0x2e6>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e106      	b.n	8004c02 <UART_SetConfig+0x2e6>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a7c      	ldr	r2, [pc, #496]	@ (8004bec <UART_SetConfig+0x2d0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d138      	bne.n	8004a70 <UART_SetConfig+0x154>
 80049fe:	4b7a      	ldr	r3, [pc, #488]	@ (8004be8 <UART_SetConfig+0x2cc>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d82d      	bhi.n	8004a68 <UART_SetConfig+0x14c>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0xf8>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a69 	.word	0x08004a69
 8004a30:	08004a69 	.word	0x08004a69
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	08004a69 	.word	0x08004a69
 8004a3c:	08004a69 	.word	0x08004a69
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a61 	.word	0x08004a61
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e0d8      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004a50:	2302      	movs	r3, #2
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e0d4      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e0d0      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e0cc      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e0c8      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf0 <UART_SetConfig+0x2d4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d125      	bne.n	8004ac6 <UART_SetConfig+0x1aa>
 8004a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004be8 <UART_SetConfig+0x2cc>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a84:	2b30      	cmp	r3, #48	@ 0x30
 8004a86:	d016      	beq.n	8004ab6 <UART_SetConfig+0x19a>
 8004a88:	2b30      	cmp	r3, #48	@ 0x30
 8004a8a:	d818      	bhi.n	8004abe <UART_SetConfig+0x1a2>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d00a      	beq.n	8004aa6 <UART_SetConfig+0x18a>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d814      	bhi.n	8004abe <UART_SetConfig+0x1a2>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <UART_SetConfig+0x182>
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d008      	beq.n	8004aae <UART_SetConfig+0x192>
 8004a9c:	e00f      	b.n	8004abe <UART_SetConfig+0x1a2>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa4:	e0ad      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aac:	e0a9      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004aae:	2304      	movs	r3, #4
 8004ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab4:	e0a5      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abc:	e0a1      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac4:	e09d      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf4 <UART_SetConfig+0x2d8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d125      	bne.n	8004b1c <UART_SetConfig+0x200>
 8004ad0:	4b45      	ldr	r3, [pc, #276]	@ (8004be8 <UART_SetConfig+0x2cc>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8004adc:	d016      	beq.n	8004b0c <UART_SetConfig+0x1f0>
 8004ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ae0:	d818      	bhi.n	8004b14 <UART_SetConfig+0x1f8>
 8004ae2:	2b80      	cmp	r3, #128	@ 0x80
 8004ae4:	d00a      	beq.n	8004afc <UART_SetConfig+0x1e0>
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d814      	bhi.n	8004b14 <UART_SetConfig+0x1f8>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <UART_SetConfig+0x1d8>
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	d008      	beq.n	8004b04 <UART_SetConfig+0x1e8>
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x1f8>
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e082      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b02:	e07e      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0a:	e07a      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b12:	e076      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	e072      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a35      	ldr	r2, [pc, #212]	@ (8004bf8 <UART_SetConfig+0x2dc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d12a      	bne.n	8004b7c <UART_SetConfig+0x260>
 8004b26:	4b30      	ldr	r3, [pc, #192]	@ (8004be8 <UART_SetConfig+0x2cc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b34:	d01a      	beq.n	8004b6c <UART_SetConfig+0x250>
 8004b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b3a:	d81b      	bhi.n	8004b74 <UART_SetConfig+0x258>
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b40:	d00c      	beq.n	8004b5c <UART_SetConfig+0x240>
 8004b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b46:	d815      	bhi.n	8004b74 <UART_SetConfig+0x258>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <UART_SetConfig+0x238>
 8004b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b50:	d008      	beq.n	8004b64 <UART_SetConfig+0x248>
 8004b52:	e00f      	b.n	8004b74 <UART_SetConfig+0x258>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e052      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b62:	e04e      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6a:	e04a      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e046      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e042      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <UART_SetConfig+0x2c4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d13a      	bne.n	8004bfc <UART_SetConfig+0x2e0>
 8004b86:	4b18      	ldr	r3, [pc, #96]	@ (8004be8 <UART_SetConfig+0x2cc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b94:	d01a      	beq.n	8004bcc <UART_SetConfig+0x2b0>
 8004b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b9a:	d81b      	bhi.n	8004bd4 <UART_SetConfig+0x2b8>
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba0:	d00c      	beq.n	8004bbc <UART_SetConfig+0x2a0>
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba6:	d815      	bhi.n	8004bd4 <UART_SetConfig+0x2b8>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <UART_SetConfig+0x298>
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb0:	d008      	beq.n	8004bc4 <UART_SetConfig+0x2a8>
 8004bb2:	e00f      	b.n	8004bd4 <UART_SetConfig+0x2b8>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e022      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	e01e      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bca:	e01a      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd2:	e016      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e012      	b.n	8004c02 <UART_SetConfig+0x2e6>
 8004bdc:	efff69f3 	.word	0xefff69f3
 8004be0:	40008000 	.word	0x40008000
 8004be4:	40013800 	.word	0x40013800
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40004400 	.word	0x40004400
 8004bf0:	40004800 	.word	0x40004800
 8004bf4:	40004c00 	.word	0x40004c00
 8004bf8:	40005000 	.word	0x40005000
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a9f      	ldr	r2, [pc, #636]	@ (8004e84 <UART_SetConfig+0x568>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d17a      	bne.n	8004d02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d824      	bhi.n	8004c5e <UART_SetConfig+0x342>
 8004c14:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <UART_SetConfig+0x300>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c5f 	.word	0x08004c5f
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c5f 	.word	0x08004c5f
 8004c2c:	08004c4f 	.word	0x08004c4f
 8004c30:	08004c5f 	.word	0x08004c5f
 8004c34:	08004c5f 	.word	0x08004c5f
 8004c38:	08004c5f 	.word	0x08004c5f
 8004c3c:	08004c57 	.word	0x08004c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe fa06 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
        break;
 8004c46:	e010      	b.n	8004c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c48:	4b8f      	ldr	r3, [pc, #572]	@ (8004e88 <UART_SetConfig+0x56c>)
 8004c4a:	61fb      	str	r3, [r7, #28]
        break;
 8004c4c:	e00d      	b.n	8004c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4e:	f7fe f967 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8004c52:	61f8      	str	r0, [r7, #28]
        break;
 8004c54:	e009      	b.n	8004c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5a:	61fb      	str	r3, [r7, #28]
        break;
 8004c5c:	e005      	b.n	8004c6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80fb 	beq.w	8004e68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d305      	bcc.n	8004c8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d903      	bls.n	8004c96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c94:	e0e8      	b.n	8004e68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	461c      	mov	r4, r3
 8004c9c:	4615      	mov	r5, r2
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	022b      	lsls	r3, r5, #8
 8004ca8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cac:	0222      	lsls	r2, r4, #8
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	6849      	ldr	r1, [r1, #4]
 8004cb2:	0849      	lsrs	r1, r1, #1
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4688      	mov	r8, r1
 8004cb8:	4681      	mov	r9, r0
 8004cba:	eb12 0a08 	adds.w	sl, r2, r8
 8004cbe:	eb43 0b09 	adc.w	fp, r3, r9
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	4659      	mov	r1, fp
 8004cd4:	f7fb fa7c 	bl	80001d0 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4613      	mov	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce6:	d308      	bcc.n	8004cfa <UART_SetConfig+0x3de>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cee:	d204      	bcs.n	8004cfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	60da      	str	r2, [r3, #12]
 8004cf8:	e0b6      	b.n	8004e68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d00:	e0b2      	b.n	8004e68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d0a:	d15e      	bne.n	8004dca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d828      	bhi.n	8004d66 <UART_SetConfig+0x44a>
 8004d14:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <UART_SetConfig+0x400>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	08004d67 	.word	0x08004d67
 8004d2c:	08004d57 	.word	0x08004d57
 8004d30:	08004d67 	.word	0x08004d67
 8004d34:	08004d67 	.word	0x08004d67
 8004d38:	08004d67 	.word	0x08004d67
 8004d3c:	08004d5f 	.word	0x08004d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d40:	f7fe f986 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004d44:	61f8      	str	r0, [r7, #28]
        break;
 8004d46:	e014      	b.n	8004d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d48:	f7fe f998 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8004d4c:	61f8      	str	r0, [r7, #28]
        break;
 8004d4e:	e010      	b.n	8004d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d50:	4b4d      	ldr	r3, [pc, #308]	@ (8004e88 <UART_SetConfig+0x56c>)
 8004d52:	61fb      	str	r3, [r7, #28]
        break;
 8004d54:	e00d      	b.n	8004d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d56:	f7fe f8e3 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8004d5a:	61f8      	str	r0, [r7, #28]
        break;
 8004d5c:	e009      	b.n	8004d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d62:	61fb      	str	r3, [r7, #28]
        break;
 8004d64:	e005      	b.n	8004d72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d077      	beq.n	8004e68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005a      	lsls	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	441a      	add	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b0f      	cmp	r3, #15
 8004d92:	d916      	bls.n	8004dc2 <UART_SetConfig+0x4a6>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d9a:	d212      	bcs.n	8004dc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f023 030f 	bic.w	r3, r3, #15
 8004da4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	8afa      	ldrh	r2, [r7, #22]
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	e052      	b.n	8004e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dc8:	e04e      	b.n	8004e68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d827      	bhi.n	8004e22 <UART_SetConfig+0x506>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x4bc>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e23 	.word	0x08004e23
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fe f928 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004e00:	61f8      	str	r0, [r7, #28]
        break;
 8004e02:	e014      	b.n	8004e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fe f93a 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8004e08:	61f8      	str	r0, [r7, #28]
        break;
 8004e0a:	e010      	b.n	8004e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <UART_SetConfig+0x56c>)
 8004e0e:	61fb      	str	r3, [r7, #28]
        break;
 8004e10:	e00d      	b.n	8004e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e12:	f7fe f885 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8004e16:	61f8      	str	r0, [r7, #28]
        break;
 8004e18:	e009      	b.n	8004e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1e:	61fb      	str	r3, [r7, #28]
        break;
 8004e20:	e005      	b.n	8004e2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d019      	beq.n	8004e68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085a      	lsrs	r2, r3, #1
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d909      	bls.n	8004e62 <UART_SetConfig+0x546>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e54:	d205      	bcs.n	8004e62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e002      	b.n	8004e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3728      	adds	r7, #40	@ 0x28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	40008000 	.word	0x40008000
 8004e88:	00f42400 	.word	0x00f42400

08004e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f8a:	d10a      	bne.n	8004fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b098      	sub	sp, #96	@ 0x60
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe0:	f7fc fa9a 	bl	8001518 <HAL_GetTick>
 8004fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d12e      	bne.n	8005052 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f88c 	bl	8005120 <UART_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d021      	beq.n	8005052 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800501c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005022:	653b      	str	r3, [r7, #80]	@ 0x50
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800502c:	647b      	str	r3, [r7, #68]	@ 0x44
 800502e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800503a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e6      	bne.n	800500e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e062      	b.n	8005118 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d149      	bne.n	80050f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005068:	2200      	movs	r2, #0
 800506a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f856 	bl	8005120 <UART_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d03c      	beq.n	80050f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	623b      	str	r3, [r7, #32]
   return(result);
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005098:	633b      	str	r3, [r7, #48]	@ 0x30
 800509a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800509e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e6      	bne.n	800507a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050cc:	61fa      	str	r2, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	617b      	str	r3, [r7, #20]
   return(result);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e011      	b.n	8005118 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3758      	adds	r7, #88	@ 0x58
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005130:	e04f      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d04b      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7fc f9ed 	bl	8001518 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <UART_WaitOnFlagUntilTimeout+0x30>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e04e      	b.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d037      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b80      	cmp	r3, #128	@ 0x80
 8005166:	d034      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d031      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b08      	cmp	r3, #8
 800517a:	d110      	bne.n	800519e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2208      	movs	r2, #8
 8005182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f838 	bl	80051fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2208      	movs	r2, #8
 800518e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e029      	b.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ac:	d111      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f81e 	bl	80051fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e00f      	b.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d0a0      	beq.n	8005132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b095      	sub	sp, #84	@ 0x54
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	61fb      	str	r3, [r7, #28]
   return(result);
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005254:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800525a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e5      	bne.n	8005234 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526c:	2b01      	cmp	r3, #1
 800526e:	d118      	bne.n	80052a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	60bb      	str	r3, [r7, #8]
   return(result);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f023 0310 	bic.w	r3, r3, #16
 8005284:	647b      	str	r3, [r7, #68]	@ 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6979      	ldr	r1, [r7, #20]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	613b      	str	r3, [r7, #16]
   return(result);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e6      	bne.n	8005270 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052b6:	bf00      	nop
 80052b8:	3754      	adds	r7, #84	@ 0x54
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff fb05 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b088      	sub	sp, #32
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	60bb      	str	r3, [r7, #8]
   return(result);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	613b      	str	r3, [r7, #16]
   return(result);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e6      	bne.n	80052f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fad1 	bl	80048dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533a:	bf00      	nop
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005356:	b084      	sub	sp, #16
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	f107 001c 	add.w	r0, r7, #28
 8005364:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa69 	bl	800584c <USB_CoreReset>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800537e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	639a      	str	r2, [r3, #56]	@ 0x38
 8005392:	e005      	b.n	80053a0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ac:	b004      	add	sp, #16
 80053ae:	4770      	bx	lr

080053b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f023 0201 	bic.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d115      	bne.n	8005420 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005400:	200a      	movs	r0, #10
 8005402:	f7fc f895 	bl	8001530 <HAL_Delay>
      ms += 10U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	330a      	adds	r3, #10
 800540a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fa0f 	bl	8005830 <USB_GetMode>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d01e      	beq.n	8005456 <USB_SetCurrentMode+0x84>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2bc7      	cmp	r3, #199	@ 0xc7
 800541c:	d9f0      	bls.n	8005400 <USB_SetCurrentMode+0x2e>
 800541e:	e01a      	b.n	8005456 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d115      	bne.n	8005452 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005432:	200a      	movs	r0, #10
 8005434:	f7fc f87c 	bl	8001530 <HAL_Delay>
      ms += 10U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	330a      	adds	r3, #10
 800543c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9f6 	bl	8005830 <USB_GetMode>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <USB_SetCurrentMode+0x84>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2bc7      	cmp	r3, #199	@ 0xc7
 800544e:	d9f0      	bls.n	8005432 <USB_SetCurrentMode+0x60>
 8005450:	e001      	b.n	8005456 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e005      	b.n	8005462 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2bc8      	cmp	r3, #200	@ 0xc8
 800545a:	d101      	bne.n	8005460 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800546c:	b084      	sub	sp, #16
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800547a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e009      	b.n	80054a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	3340      	adds	r3, #64	@ 0x40
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	2200      	movs	r2, #0
 8005498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3301      	adds	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b0e      	cmp	r3, #14
 80054a4:	d9f2      	bls.n	800548c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11c      	bne.n	80054e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054bc:	f043 0302 	orr.w	r3, r3, #2
 80054c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e005      	b.n	80054f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054fa:	461a      	mov	r2, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005500:	2103      	movs	r1, #3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f95a 	bl	80057bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005508:	2110      	movs	r1, #16
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8f6 	bl	80056fc <USB_FlushTxFifo>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f920 	bl	8005760 <USB_FlushRxFifo>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005530:	461a      	mov	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553c:	461a      	mov	r2, r3
 800553e:	2300      	movs	r3, #0
 8005540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005548:	461a      	mov	r2, r3
 800554a:	2300      	movs	r3, #0
 800554c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e043      	b.n	80055dc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800556a:	d118      	bne.n	800559e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e013      	b.n	80055b0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005594:	461a      	mov	r2, r3
 8005596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e008      	b.n	80055b0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ce:	461a      	mov	r2, r3
 80055d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055e0:	461a      	mov	r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d3b5      	bcc.n	8005554 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	e043      	b.n	8005676 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005604:	d118      	bne.n	8005638 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005618:	461a      	mov	r2, r3
 800561a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e013      	b.n	800564a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562e:	461a      	mov	r2, r3
 8005630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e008      	b.n	800564a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	2300      	movs	r3, #0
 8005648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005656:	461a      	mov	r2, r3
 8005658:	2300      	movs	r3, #0
 800565a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005668:	461a      	mov	r2, r3
 800566a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800566e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	3301      	adds	r3, #1
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800567a:	461a      	mov	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4293      	cmp	r3, r2
 8005680:	d3b5      	bcc.n	80055ee <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80056a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f043 0210 	orr.w	r2, r3, #16
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <USB_DevInit+0x28c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f043 0208 	orr.w	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056e0:	f043 0304 	orr.w	r3, r3, #4
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056f4:	b004      	add	sp, #16
 80056f6:	4770      	bx	lr
 80056f8:	803c3800 	.word	0x803c3800

080056fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005716:	d901      	bls.n	800571c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e01b      	b.n	8005754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	daf2      	bge.n	800570a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	019b      	lsls	r3, r3, #6
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005740:	d901      	bls.n	8005746 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e006      	b.n	8005754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b20      	cmp	r3, #32
 8005750:	d0f0      	beq.n	8005734 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005778:	d901      	bls.n	800577e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e018      	b.n	80057b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	daf2      	bge.n	800576c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2210      	movs	r2, #16
 800578e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800579c:	d901      	bls.n	80057a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e006      	b.n	80057b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d0f0      	beq.n	8005790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f003 0301 	and.w	r3, r3, #1
}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005864:	d901      	bls.n	800586a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e01b      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	daf2      	bge.n	8005858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800588e:	d901      	bls.n	8005894 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d0f0      	beq.n	8005882 <USB_CoreReset+0x36>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <__NVIC_SetPriority>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	6039      	str	r1, [r7, #0]
 80058ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	db0a      	blt.n	80058da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	490c      	ldr	r1, [pc, #48]	@ (80058fc <__NVIC_SetPriority+0x4c>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	0112      	lsls	r2, r2, #4
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	440b      	add	r3, r1
 80058d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058d8:	e00a      	b.n	80058f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4908      	ldr	r1, [pc, #32]	@ (8005900 <__NVIC_SetPriority+0x50>)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3b04      	subs	r3, #4
 80058e8:	0112      	lsls	r2, r2, #4
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	440b      	add	r3, r1
 80058ee:	761a      	strb	r2, [r3, #24]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	e000e100 	.word	0xe000e100
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005908:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <SysTick_Handler+0x1c>)
 800590a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800590c:	f001 ff00 	bl	8007710 <xTaskGetSchedulerState>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005916:	f002 fedf 	bl	80086d8 <xPortSysTickHandler>
  }
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	e000e010 	.word	0xe000e010

08005924 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005928:	2100      	movs	r1, #0
 800592a:	f06f 0004 	mvn.w	r0, #4
 800592e:	f7ff ffbf 	bl	80058b0 <__NVIC_SetPriority>
#endif
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593e:	f3ef 8305 	mrs	r3, IPSR
 8005942:	603b      	str	r3, [r7, #0]
  return(result);
 8005944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800594a:	f06f 0305 	mvn.w	r3, #5
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	e00c      	b.n	800596c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005952:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <osKernelInitialize+0x44>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800595a:	4b08      	ldr	r3, [pc, #32]	@ (800597c <osKernelInitialize+0x44>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005960:	2300      	movs	r3, #0
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	e002      	b.n	800596c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800596c:	687b      	ldr	r3, [r7, #4]
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	200010e4 	.word	0x200010e4

08005980 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005986:	f3ef 8305 	mrs	r3, IPSR
 800598a:	603b      	str	r3, [r7, #0]
  return(result);
 800598c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005992:	f06f 0305 	mvn.w	r3, #5
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	e010      	b.n	80059bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800599a:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <osKernelStart+0x48>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d109      	bne.n	80059b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059a2:	f7ff ffbf 	bl	8005924 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059a6:	4b08      	ldr	r3, [pc, #32]	@ (80059c8 <osKernelStart+0x48>)
 80059a8:	2202      	movs	r2, #2
 80059aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059ac:	f001 fa98 	bl	8006ee0 <vTaskStartScheduler>
      stat = osOK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	e002      	b.n	80059bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059bc:	687b      	ldr	r3, [r7, #4]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200010e4 	.word	0x200010e4

080059cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08e      	sub	sp, #56	@ 0x38
 80059d0:	af04      	add	r7, sp, #16
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059dc:	f3ef 8305 	mrs	r3, IPSR
 80059e0:	617b      	str	r3, [r7, #20]
  return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d17e      	bne.n	8005ae6 <osThreadNew+0x11a>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d07b      	beq.n	8005ae6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059ee:	2380      	movs	r3, #128	@ 0x80
 80059f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059f2:	2318      	movs	r3, #24
 80059f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d045      	beq.n	8005a92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <osThreadNew+0x48>
        name = attr->name;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <osThreadNew+0x6e>
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b38      	cmp	r3, #56	@ 0x38
 8005a2c:	d805      	bhi.n	8005a3a <osThreadNew+0x6e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <osThreadNew+0x72>
        return (NULL);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e054      	b.n	8005ae8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <osThreadNew+0xa8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b5b      	cmp	r3, #91	@ 0x5b
 8005a5c:	d90a      	bls.n	8005a74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d006      	beq.n	8005a74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <osThreadNew+0xa8>
        mem = 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e010      	b.n	8005a96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10c      	bne.n	8005a96 <osThreadNew+0xca>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d108      	bne.n	8005a96 <osThreadNew+0xca>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <osThreadNew+0xca>
          mem = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e001      	b.n	8005a96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d110      	bne.n	8005abe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005aa4:	9202      	str	r2, [sp, #8]
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f001 f848 	bl	8006b48 <xTaskCreateStatic>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	e013      	b.n	8005ae6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d110      	bne.n	8005ae6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f107 0310 	add.w	r3, r7, #16
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 f896 	bl	8006c08 <xTaskCreate>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <osThreadNew+0x11a>
            hTask = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ae6:	693b      	ldr	r3, [r7, #16]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3728      	adds	r7, #40	@ 0x28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <osThreadFlagsSet+0x1a>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	da03      	bge.n	8005b12 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005b0a:	f06f 0303 	mvn.w	r3, #3
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e035      	b.n	8005b7e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b18:	f3ef 8305 	mrs	r3, IPSR
 8005b1c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b1e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01f      	beq.n	8005b64 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2201      	movs	r2, #1
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f001 ff7d 	bl	8007a34 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	2200      	movs	r2, #0
 8005b40:	9200      	str	r2, [sp, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	2100      	movs	r1, #0
 8005b46:	6978      	ldr	r0, [r7, #20]
 8005b48:	f001 ff74 	bl	8007a34 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d015      	beq.n	8005b7e <osThreadFlagsSet+0x8e>
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <osThreadFlagsSet+0x98>)
 8005b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	e00c      	b.n	8005b7e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005b64:	2300      	movs	r3, #0
 8005b66:	2201      	movs	r2, #1
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f001 feb8 	bl	80078e0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005b70:	f107 030c 	add.w	r3, r7, #12
 8005b74:	2200      	movs	r2, #0
 8005b76:	2100      	movs	r1, #0
 8005b78:	6978      	ldr	r0, [r7, #20]
 8005b7a:	f001 feb1 	bl	80078e0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08c      	sub	sp, #48	@ 0x30
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b98:	f3ef 8305 	mrs	r3, IPSR
 8005b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b9e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005ba4:	f06f 0305 	mvn.w	r3, #5
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005baa:	e06b      	b.n	8005c84 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da03      	bge.n	8005bba <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005bb2:	f06f 0303 	mvn.w	r3, #3
 8005bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb8:	e064      	b.n	8005c84 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc8:	e001      	b.n	8005bce <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005bd6:	f001 fa89 	bl	80070ec <xTaskGetTickCount>
 8005bda:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005bdc:	f107 0210 	add.w	r2, r7, #16
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be4:	2000      	movs	r0, #0
 8005be6:	f001 fe21 	bl	800782c <xTaskNotifyWait>
 8005bea:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d137      	bne.n	8005c62 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00c      	beq.n	8005c26 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c10:	4013      	ands	r3, r2
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d032      	beq.n	8005c7e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005c1e:	f06f 0302 	mvn.w	r3, #2
 8005c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005c24:	e02e      	b.n	8005c84 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d128      	bne.n	8005c82 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005c36:	f06f 0302 	mvn.w	r3, #2
 8005c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005c3c:	e022      	b.n	8005c84 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005c3e:	f001 fa55 	bl	80070ec <xTaskGetTickCount>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d902      	bls.n	8005c58 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c56:	e00e      	b.n	8005c76 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8005c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c60:	e009      	b.n	8005c76 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8005c68:	f06f 0302 	mvn.w	r3, #2
 8005c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c6e:	e002      	b.n	8005c76 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005c70:	f06f 0301 	mvn.w	r3, #1
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1af      	bne.n	8005bdc <osThreadFlagsWait+0x50>
 8005c7c:	e002      	b.n	8005c84 <osThreadFlagsWait+0xf8>
            break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <osThreadFlagsWait+0xf8>
            break;
 8005c82:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3730      	adds	r7, #48	@ 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c96:	f3ef 8305 	mrs	r3, IPSR
 8005c9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <osDelay+0x1c>
    stat = osErrorISR;
 8005ca2:	f06f 0305 	mvn.w	r3, #5
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e007      	b.n	8005cba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 f8dd 	bl	8006e74 <vTaskDelay>
    }
  }

  return (stat);
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	@ 0x28
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd4:	f3ef 8305 	mrs	r3, IPSR
 8005cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d15f      	bne.n	8005da0 <osMessageQueueNew+0xdc>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d05c      	beq.n	8005da0 <osMessageQueueNew+0xdc>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d059      	beq.n	8005da0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d029      	beq.n	8005d4c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d012      	beq.n	8005d26 <osMessageQueueNew+0x62>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d06:	d90e      	bls.n	8005d26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <osMessageQueueNew+0x62>
        mem = 1;
 8005d20:	2301      	movs	r3, #1
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e014      	b.n	8005d50 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d110      	bne.n	8005d50 <osMessageQueueNew+0x8c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <osMessageQueueNew+0x8c>
          mem = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e001      	b.n	8005d50 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d10b      	bne.n	8005d6e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2100      	movs	r1, #0
 8005d60:	9100      	str	r1, [sp, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f9c3 	bl	80060f0 <xQueueGenericCreateStatic>
 8005d6a:	61f8      	str	r0, [r7, #28]
 8005d6c:	e008      	b.n	8005d80 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d74:	2200      	movs	r2, #0
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa36 	bl	80061ea <xQueueGenericCreate>
 8005d7e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00c      	beq.n	8005da0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e001      	b.n	8005d98 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	69f8      	ldr	r0, [r7, #28]
 8005d9c:	f000 fe76 	bl	8006a8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005da0:	69fb      	ldr	r3, [r7, #28]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dc2:	f3ef 8305 	mrs	r3, IPSR
 8005dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8005dc8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d028      	beq.n	8005e20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <osMessageQueueGet+0x34>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <osMessageQueueGet+0x34>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005de0:	f06f 0303 	mvn.w	r3, #3
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e037      	b.n	8005e58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005dec:	f107 0310 	add.w	r3, r7, #16
 8005df0:	461a      	mov	r2, r3
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	69b8      	ldr	r0, [r7, #24]
 8005df6:	f000 fcb7 	bl	8006768 <xQueueReceiveFromISR>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d003      	beq.n	8005e08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005e00:	f06f 0302 	mvn.w	r3, #2
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e027      	b.n	8005e58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d024      	beq.n	8005e58 <osMessageQueueGet+0xac>
 8005e0e:	4b15      	ldr	r3, [pc, #84]	@ (8005e64 <osMessageQueueGet+0xb8>)
 8005e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	e01b      	b.n	8005e58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <osMessageQueueGet+0x80>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005e2c:	f06f 0303 	mvn.w	r3, #3
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	e011      	b.n	8005e58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	69b8      	ldr	r0, [r7, #24]
 8005e3a:	f000 fbbd 	bl	80065b8 <xQueueReceive>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d009      	beq.n	8005e58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005e4a:	f06f 0301 	mvn.w	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	e002      	b.n	8005e58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005e52:	f06f 0302 	mvn.w	r3, #2
 8005e56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e58:	69fb      	ldr	r3, [r7, #28]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a07      	ldr	r2, [pc, #28]	@ (8005e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	4a06      	ldr	r2, [pc, #24]	@ (8005e98 <vApplicationGetIdleTaskMemory+0x30>)
 8005e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2280      	movs	r2, #128	@ 0x80
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	200010e8 	.word	0x200010e8
 8005e98:	20001144 	.word	0x20001144

08005e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a07      	ldr	r2, [pc, #28]	@ (8005ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4a06      	ldr	r2, [pc, #24]	@ (8005ecc <vApplicationGetTimerTaskMemory+0x30>)
 8005eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20001344 	.word	0x20001344
 8005ecc:	200013a0 	.word	0x200013a0

08005ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f103 0208 	add.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f103 0208 	add.w	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f103 0208 	add.w	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d103      	bne.n	8005f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e00c      	b.n	8005fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3308      	adds	r3, #8
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e002      	b.n	8005fa0 <vListInsert+0x2e>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d2f6      	bcs.n	8005f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6892      	ldr	r2, [r2, #8]
 8005ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d103      	bne.n	8006018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	1e5a      	subs	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006064:	f002 faa8 	bl	80085b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	441a      	add	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	3b01      	subs	r3, #1
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	22ff      	movs	r2, #255	@ 0xff
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	22ff      	movs	r2, #255	@ 0xff
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00f      	beq.n	80060e2 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3310      	adds	r3, #16
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f968 	bl	800739c <xTaskRemoveFromEventList>
 80060cc:	e009      	b.n	80060e2 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3310      	adds	r3, #16
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fefc 	bl	8005ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3324      	adds	r3, #36	@ 0x24
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fef7 	bl	8005ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060e2:	f002 fa9b 	bl	800861c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060e6:	2301      	movs	r3, #1
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08e      	sub	sp, #56	@ 0x38
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <xQueueGenericCreateStatic+0x56>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <xQueueGenericCreateStatic+0x5a>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericCreateStatic+0x5c>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <xQueueGenericCreateStatic+0x84>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueGenericCreateStatic+0x88>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueGenericCreateStatic+0x8a>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61fb      	str	r3, [r7, #28]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006196:	2350      	movs	r3, #80	@ 0x50
 8006198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b50      	cmp	r3, #80	@ 0x50
 800619e:	d00b      	beq.n	80061b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61bb      	str	r3, [r7, #24]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f840 	bl	8006260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3730      	adds	r7, #48	@ 0x30
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	@ 0x28
 80061ee:	af02      	add	r7, sp, #8
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <xQueueGenericCreate+0x2c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	613b      	str	r3, [r7, #16]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3350      	adds	r3, #80	@ 0x50
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fae9 	bl	80087fc <pvPortMalloc>
 800622a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d011      	beq.n	8006256 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	3350      	adds	r3, #80	@ 0x50
 800623a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006244:	79fa      	ldrb	r2, [r7, #7]
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f805 	bl	8006260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006256:	69bb      	ldr	r3, [r7, #24]
	}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e002      	b.n	8006282 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800628e:	2101      	movs	r1, #1
 8006290:	69b8      	ldr	r0, [r7, #24]
 8006292:	f7ff fed1 	bl	8006038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	@ 0x38
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062b6:	2300      	movs	r3, #0
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10b      	bne.n	80062dc <xQueueGenericSend+0x34>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <xQueueGenericSend+0x42>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <xQueueGenericSend+0x46>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xQueueGenericSend+0x48>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10b      	bne.n	800630c <xQueueGenericSend+0x64>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	e7fd      	b.n	8006308 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d103      	bne.n	800631a <xQueueGenericSend+0x72>
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <xQueueGenericSend+0x76>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <xQueueGenericSend+0x78>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <xQueueGenericSend+0x94>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800633c:	f001 f9e8 	bl	8007710 <xTaskGetSchedulerState>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <xQueueGenericSend+0xa4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <xQueueGenericSend+0xa8>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <xQueueGenericSend+0xaa>
 8006350:	2300      	movs	r3, #0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <xQueueGenericSend+0xc6>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	61fb      	str	r3, [r7, #28]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800636e:	f002 f923 	bl	80085b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <xQueueGenericSend+0xdc>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d112      	bne.n	80063aa <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800638a:	f000 fa6f 	bl	800686c <prvCopyDataToQueue>
 800638e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	3324      	adds	r3, #36	@ 0x24
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fffd 	bl	800739c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063a2:	f002 f93b 	bl	800861c <vPortExitCritical>
				return pdPASS;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e062      	b.n	8006470 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063b0:	f002 f934 	bl	800861c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e05b      	b.n	8006470 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063be:	f107 0314 	add.w	r3, r7, #20
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f84e 	bl	8007464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063cc:	f002 f926 	bl	800861c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063d0:	f000 fdee 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063d4:	f002 f8f0 	bl	80085b8 <vPortEnterCritical>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x146>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d103      	bne.n	8006404 <xQueueGenericSend+0x15c>
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006404:	f002 f90a 	bl	800861c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006408:	1d3a      	adds	r2, r7, #4
 800640a:	f107 0314 	add.w	r3, r7, #20
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f001 f83d 	bl	8007490 <xTaskCheckForTimeOut>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d123      	bne.n	8006464 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800641c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800641e:	f000 fb1d 	bl	8006a5c <prvIsQueueFull>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d017      	beq.n	8006458 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	3310      	adds	r3, #16
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f000 ff61 	bl	80072f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006438:	f000 faa8 	bl	800698c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800643c:	f000 fdc6 	bl	8006fcc <xTaskResumeAll>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d193      	bne.n	800636e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <xQueueGenericSend+0x1d0>)
 8006448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	e78a      	b.n	800636e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800645a:	f000 fa97 	bl	800698c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800645e:	f000 fdb5 	bl	8006fcc <xTaskResumeAll>
 8006462:	e784      	b.n	800636e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006466:	f000 fa91 	bl	800698c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800646a:	f000 fdaf 	bl	8006fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800646e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006470:	4618      	mov	r0, r3
 8006472:	3738      	adds	r7, #56	@ 0x38
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b090      	sub	sp, #64	@ 0x40
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSendFromISR+0x3e>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <xQueueGenericSendFromISR+0x42>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <xQueueGenericSendFromISR+0x44>
 80064be:	2300      	movs	r3, #0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10b      	bne.n	80064dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSendFromISR+0x6e>
 80064e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <xQueueGenericSendFromISR+0x72>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericSendFromISR+0x74>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	623b      	str	r3, [r7, #32]
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	e7fd      	b.n	8006508 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800650c:	f002 f934 	bl	8008778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006510:	f3ef 8211 	mrs	r2, BASEPRI
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61fa      	str	r2, [r7, #28]
 8006526:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006528:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <xQueueGenericSendFromISR+0xc2>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d12f      	bne.n	800659e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006544:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006554:	f000 f98a 	bl	800686c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006558:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d112      	bne.n	8006588 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656c:	3324      	adds	r3, #36	@ 0x24
 800656e:	4618      	mov	r0, r3
 8006570:	f000 ff14 	bl	800739c <xTaskRemoveFromEventList>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e007      	b.n	8006598 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006588:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800658c:	3301      	adds	r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	b25a      	sxtb	r2, r3
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006598:	2301      	movs	r3, #1
 800659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800659c:	e001      	b.n	80065a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3740      	adds	r7, #64	@ 0x40
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08c      	sub	sp, #48	@ 0x30
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <xQueueReceive+0x32>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	623b      	str	r3, [r7, #32]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <xQueueReceive+0x40>
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <xQueueReceive+0x44>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <xQueueReceive+0x46>
 80065fc:	2300      	movs	r3, #0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <xQueueReceive+0x62>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	61fb      	str	r3, [r7, #28]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800661a:	f001 f879 	bl	8007710 <xTaskGetSchedulerState>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <xQueueReceive+0x72>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <xQueueReceive+0x76>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <xQueueReceive+0x78>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <xQueueReceive+0x94>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	61bb      	str	r3, [r7, #24]
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800664c:	f001 ffb4 	bl	80085b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d014      	beq.n	8006686 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006660:	f000 f96e 	bl	8006940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	1e5a      	subs	r2, r3, #1
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006676:	3310      	adds	r3, #16
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fe8f 	bl	800739c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800667e:	f001 ffcd 	bl	800861c <vPortExitCritical>
				return pdPASS;
 8006682:	2301      	movs	r3, #1
 8006684:	e069      	b.n	800675a <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800668c:	f001 ffc6 	bl	800861c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006690:	2300      	movs	r3, #0
 8006692:	e062      	b.n	800675a <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800669a:	f107 0310 	add.w	r3, r7, #16
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fee0 	bl	8007464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a8:	f001 ffb8 	bl	800861c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ac:	f000 fc80 	bl	8006fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066b0:	f001 ff82 	bl	80085b8 <vPortEnterCritical>
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ba:	b25b      	sxtb	r3, r3
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d103      	bne.n	80066ca <xQueueReceive+0x112>
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d103      	bne.n	80066e0 <xQueueReceive+0x128>
 80066d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e0:	f001 ff9c 	bl	800861c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e4:	1d3a      	adds	r2, r7, #4
 80066e6:	f107 0310 	add.w	r3, r7, #16
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fecf 	bl	8007490 <xTaskCheckForTimeOut>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d123      	bne.n	8006740 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066fa:	f000 f999 	bl	8006a30 <prvIsQueueEmpty>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d017      	beq.n	8006734 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fdf3 	bl	80072f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006714:	f000 f93a 	bl	800698c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006718:	f000 fc58 	bl	8006fcc <xTaskResumeAll>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d194      	bne.n	800664c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006722:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <xQueueReceive+0x1ac>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	e78b      	b.n	800664c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006736:	f000 f929 	bl	800698c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800673a:	f000 fc47 	bl	8006fcc <xTaskResumeAll>
 800673e:	e785      	b.n	800664c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006742:	f000 f923 	bl	800698c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006746:	f000 fc41 	bl	8006fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800674a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800674c:	f000 f970 	bl	8006a30 <prvIsQueueEmpty>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	f43f af7a 	beq.w	800664c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800675a:	4618      	mov	r0, r3
 800675c:	3730      	adds	r7, #48	@ 0x30
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08e      	sub	sp, #56	@ 0x38
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	623b      	str	r3, [r7, #32]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <xQueueReceiveFromISR+0x3c>
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <xQueueReceiveFromISR+0x40>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <xQueueReceiveFromISR+0x42>
 80067a8:	2300      	movs	r3, #0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	61fb      	str	r3, [r7, #28]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067c6:	f001 ffd7 	bl	8008778 <vPortValidateInterruptPriority>
	__asm volatile
 80067ca:	f3ef 8211 	mrs	r2, BASEPRI
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	61ba      	str	r2, [r7, #24]
 80067e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02f      	beq.n	8006852 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006800:	f000 f89e 	bl	8006940 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	1e5a      	subs	r2, r3, #1
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800680c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d112      	bne.n	800683c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	3310      	adds	r3, #16
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fdba 	bl	800739c <xTaskRemoveFromEventList>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00e      	beq.n	800684c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e007      	b.n	800684c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800683c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006840:	3301      	adds	r3, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	b25a      	sxtb	r2, r3
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800684c:	2301      	movs	r3, #1
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006850:	e001      	b.n	8006856 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006852:	2300      	movs	r3, #0
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	613b      	str	r3, [r7, #16]
	__asm volatile
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f383 8811 	msr	BASEPRI, r3
}
 8006860:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006864:	4618      	mov	r0, r3
 8006866:	3738      	adds	r7, #56	@ 0x38
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10d      	bne.n	80068a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d14d      	bne.n	800692e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 ff58 	bl	800774c <xTaskPriorityDisinherit>
 800689c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
 80068a4:	e043      	b.n	800692e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d119      	bne.n	80068e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6858      	ldr	r0, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	461a      	mov	r2, r3
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	f002 f9ba 	bl	8008c30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d32b      	bcc.n	800692e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	e026      	b.n	800692e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68d8      	ldr	r0, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	461a      	mov	r2, r3
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	f002 f9a0 	bl	8008c30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	425b      	negs	r3, r3
 80068fa:	441a      	add	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d207      	bcs.n	800691c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006914:	425b      	negs	r3, r3
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d105      	bne.n	800692e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	3b01      	subs	r3, #1
 800692c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006936:	697b      	ldr	r3, [r7, #20]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d018      	beq.n	8006984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	441a      	add	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	429a      	cmp	r2, r3
 800696a:	d303      	bcc.n	8006974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68d9      	ldr	r1, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697c:	461a      	mov	r2, r3
 800697e:	6838      	ldr	r0, [r7, #0]
 8006980:	f002 f956 	bl	8008c30 <memcpy>
	}
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006994:	f001 fe10 	bl	80085b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800699e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a0:	e011      	b.n	80069c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3324      	adds	r3, #36	@ 0x24
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fcf4 	bl	800739c <xTaskRemoveFromEventList>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069ba:	f000 fdcd 	bl	8007558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dce9      	bgt.n	80069a2 <prvUnlockQueue+0x16>
 80069ce:	e000      	b.n	80069d2 <prvUnlockQueue+0x46>
					break;
 80069d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	22ff      	movs	r2, #255	@ 0xff
 80069d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069da:	f001 fe1f 	bl	800861c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069de:	f001 fdeb 	bl	80085b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069ea:	e011      	b.n	8006a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d012      	beq.n	8006a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3310      	adds	r3, #16
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fccf 	bl	800739c <xTaskRemoveFromEventList>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a04:	f000 fda8 	bl	8007558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dce9      	bgt.n	80069ec <prvUnlockQueue+0x60>
 8006a18:	e000      	b.n	8006a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	22ff      	movs	r2, #255	@ 0xff
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a24:	f001 fdfa 	bl	800861c <vPortExitCritical>
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a38:	f001 fdbe 	bl	80085b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a44:	2301      	movs	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e001      	b.n	8006a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a4e:	f001 fde5 	bl	800861c <vPortExitCritical>

	return xReturn;
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a64:	f001 fda8 	bl	80085b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d102      	bne.n	8006a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e001      	b.n	8006a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a7e:	f001 fdcd 	bl	800861c <vPortExitCritical>

	return xReturn;
 8006a82:	68fb      	ldr	r3, [r7, #12]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e014      	b.n	8006ac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8006adc <vQueueAddToRegistry+0x50>)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aa8:	490c      	ldr	r1, [pc, #48]	@ (8006adc <vQueueAddToRegistry+0x50>)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <vQueueAddToRegistry+0x50>)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4413      	add	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006abe:	e006      	b.n	8006ace <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b07      	cmp	r3, #7
 8006aca:	d9e7      	bls.n	8006a9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	200017a0 	.word	0x200017a0

08006ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006af0:	f001 fd62 	bl	80085b8 <vPortEnterCritical>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d103      	bne.n	8006b0a <vQueueWaitForMessageRestricted+0x2a>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d103      	bne.n	8006b20 <vQueueWaitForMessageRestricted+0x40>
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b20:	f001 fd7c 	bl	800861c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3324      	adds	r3, #36	@ 0x24
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fc05 	bl	8007344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b3a:	6978      	ldr	r0, [r7, #20]
 8006b3c:	f7ff ff26 	bl	800698c <prvUnlockQueue>
	}
 8006b40:	bf00      	nop
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	@ 0x38
 8006b4c:	af04      	add	r7, sp, #16
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61fb      	str	r3, [r7, #28]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b92:	235c      	movs	r3, #92	@ 0x5c
 8006b94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b9a:	d00b      	beq.n	8006bb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	61bb      	str	r3, [r7, #24]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01e      	beq.n	8006bfa <xTaskCreateStatic+0xb2>
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01b      	beq.n	8006bfa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	9302      	str	r3, [sp, #8]
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f850 	bl	8006c92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bf4:	f000 f8de 	bl	8006db4 <prvAddNewTaskToReadyList>
 8006bf8:	e001      	b.n	8006bfe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bfe:	697b      	ldr	r3, [r7, #20]
	}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3728      	adds	r7, #40	@ 0x28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	@ 0x30
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fded 	bl	80087fc <pvPortMalloc>
 8006c22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c2a:	205c      	movs	r0, #92	@ 0x5c
 8006c2c:	f001 fde6 	bl	80087fc <pvPortMalloc>
 8006c30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c3e:	e005      	b.n	8006c4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c40:	6978      	ldr	r0, [r7, #20]
 8006c42:	f001 fea9 	bl	8008998 <vPortFree>
 8006c46:	e001      	b.n	8006c4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d017      	beq.n	8006c82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9303      	str	r3, [sp, #12]
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f80e 	bl	8006c92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c76:	69f8      	ldr	r0, [r7, #28]
 8006c78:	f000 f89c 	bl	8006db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	e002      	b.n	8006c88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c88:	69bb      	ldr	r3, [r7, #24]
	}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b088      	sub	sp, #32
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	21a5      	movs	r1, #165	@ 0xa5
 8006cac:	f001 ff94 	bl	8008bd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	617b      	str	r3, [r7, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	e7fd      	b.n	8006ce8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01f      	beq.n	8006d32 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e012      	b.n	8006d1e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	7819      	ldrb	r1, [r3, #0]
 8006d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	3334      	adds	r3, #52	@ 0x34
 8006d08:	460a      	mov	r2, r1
 8006d0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d9e9      	bls.n	8006cf8 <prvInitialiseNewTask+0x66>
 8006d24:	e000      	b.n	8006d28 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d30:	e003      	b.n	8006d3a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	2b37      	cmp	r3, #55	@ 0x37
 8006d3e:	d901      	bls.n	8006d44 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d40:	2337      	movs	r3, #55	@ 0x37
 8006d42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d4e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	2200      	movs	r2, #0
 8006d54:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff f8d8 	bl	8005f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	3318      	adds	r3, #24
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff f8d3 	bl	8005f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	68f9      	ldr	r1, [r7, #12]
 8006d92:	69b8      	ldr	r0, [r7, #24]
 8006d94:	f001 fadc 	bl	8008350 <pxPortInitialiseStack>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006daa:	bf00      	nop
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006dbc:	f001 fbfc 	bl	80085b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dc0:	4b26      	ldr	r3, [pc, #152]	@ (8006e5c <prvAddNewTaskToReadyList+0xa8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	4a25      	ldr	r2, [pc, #148]	@ (8006e5c <prvAddNewTaskToReadyList+0xa8>)
 8006dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dca:	4b25      	ldr	r3, [pc, #148]	@ (8006e60 <prvAddNewTaskToReadyList+0xac>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dd2:	4a23      	ldr	r2, [pc, #140]	@ (8006e60 <prvAddNewTaskToReadyList+0xac>)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dd8:	4b20      	ldr	r3, [pc, #128]	@ (8006e5c <prvAddNewTaskToReadyList+0xa8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d110      	bne.n	8006e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006de0:	f000 fbd8 	bl	8007594 <prvInitialiseTaskLists>
 8006de4:	e00d      	b.n	8006e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006de6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e64 <prvAddNewTaskToReadyList+0xb0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dee:	4b1c      	ldr	r3, [pc, #112]	@ (8006e60 <prvAddNewTaskToReadyList+0xac>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d802      	bhi.n	8006e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dfc:	4a18      	ldr	r2, [pc, #96]	@ (8006e60 <prvAddNewTaskToReadyList+0xac>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e02:	4b19      	ldr	r3, [pc, #100]	@ (8006e68 <prvAddNewTaskToReadyList+0xb4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3301      	adds	r3, #1
 8006e08:	4a17      	ldr	r2, [pc, #92]	@ (8006e68 <prvAddNewTaskToReadyList+0xb4>)
 8006e0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e0c:	4b16      	ldr	r3, [pc, #88]	@ (8006e68 <prvAddNewTaskToReadyList+0xb4>)
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e18:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <prvAddNewTaskToReadyList+0xb8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d903      	bls.n	8006e28 <prvAddNewTaskToReadyList+0x74>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	4a11      	ldr	r2, [pc, #68]	@ (8006e6c <prvAddNewTaskToReadyList+0xb8>)
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4a0e      	ldr	r2, [pc, #56]	@ (8006e70 <prvAddNewTaskToReadyList+0xbc>)
 8006e36:	441a      	add	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7ff f873 	bl	8005f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e44:	f001 fbea 	bl	800861c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e48:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <prvAddNewTaskToReadyList+0xb0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e50:	4b03      	ldr	r3, [pc, #12]	@ (8006e60 <prvAddNewTaskToReadyList+0xac>)
 8006e52:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20001cb4 	.word	0x20001cb4
 8006e60:	200017e0 	.word	0x200017e0
 8006e64:	20001cc0 	.word	0x20001cc0
 8006e68:	20001cd0 	.word	0x20001cd0
 8006e6c:	20001cbc 	.word	0x20001cbc
 8006e70:	200017e4 	.word	0x200017e4

08006e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e86:	4b14      	ldr	r3, [pc, #80]	@ (8006ed8 <vTaskDelay+0x64>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <vTaskDelay+0x32>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	e7fd      	b.n	8006ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ea6:	f000 f883 	bl	8006fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fea1 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eb2:	f000 f88b 	bl	8006fcc <xTaskResumeAll>
 8006eb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ebe:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <vTaskDelay+0x68>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20001cdc 	.word	0x20001cdc
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	@ 0x28
 8006ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eee:	463a      	mov	r2, r7
 8006ef0:	1d39      	adds	r1, r7, #4
 8006ef2:	f107 0308 	add.w	r3, r7, #8
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe ffb6 	bl	8005e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	9202      	str	r2, [sp, #8]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	460a      	mov	r2, r1
 8006f0e:	4922      	ldr	r1, [pc, #136]	@ (8006f98 <vTaskStartScheduler+0xb8>)
 8006f10:	4822      	ldr	r0, [pc, #136]	@ (8006f9c <vTaskStartScheduler+0xbc>)
 8006f12:	f7ff fe19 	bl	8006b48 <xTaskCreateStatic>
 8006f16:	4603      	mov	r3, r0
 8006f18:	4a21      	ldr	r2, [pc, #132]	@ (8006fa0 <vTaskStartScheduler+0xc0>)
 8006f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f1c:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <vTaskStartScheduler+0xc0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e001      	b.n	8006f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d102      	bne.n	8006f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f34:	f000 feb2 	bl	8007c9c <xTimerCreateTimerTask>
 8006f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d116      	bne.n	8006f6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	613b      	str	r3, [r7, #16]
}
 8006f52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f54:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <vTaskStartScheduler+0xc4>)
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f5c:	4b12      	ldr	r3, [pc, #72]	@ (8006fa8 <vTaskStartScheduler+0xc8>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f62:	4b12      	ldr	r3, [pc, #72]	@ (8006fac <vTaskStartScheduler+0xcc>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f68:	f001 fa82 	bl	8008470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f6c:	e00f      	b.n	8006f8e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d10b      	bne.n	8006f8e <vTaskStartScheduler+0xae>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <vTaskStartScheduler+0xaa>
}
 8006f8e:	bf00      	nop
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	08008cc0 	.word	0x08008cc0
 8006f9c:	08007571 	.word	0x08007571
 8006fa0:	20001cd8 	.word	0x20001cd8
 8006fa4:	20001cd4 	.word	0x20001cd4
 8006fa8:	20001cc0 	.word	0x20001cc0
 8006fac:	20001cb8 	.word	0x20001cb8

08006fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb4:	4b04      	ldr	r3, [pc, #16]	@ (8006fc8 <vTaskSuspendAll+0x18>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a03      	ldr	r2, [pc, #12]	@ (8006fc8 <vTaskSuspendAll+0x18>)
 8006fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20001cdc 	.word	0x20001cdc

08006fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fda:	4b3c      	ldr	r3, [pc, #240]	@ (80070cc <xTaskResumeAll+0x100>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <xTaskResumeAll+0x2e>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	603b      	str	r3, [r7, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ffa:	f001 fadd 	bl	80085b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ffe:	4b33      	ldr	r3, [pc, #204]	@ (80070cc <xTaskResumeAll+0x100>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3b01      	subs	r3, #1
 8007004:	4a31      	ldr	r2, [pc, #196]	@ (80070cc <xTaskResumeAll+0x100>)
 8007006:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007008:	4b30      	ldr	r3, [pc, #192]	@ (80070cc <xTaskResumeAll+0x100>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d156      	bne.n	80070be <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007010:	4b2f      	ldr	r3, [pc, #188]	@ (80070d0 <xTaskResumeAll+0x104>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d052      	beq.n	80070be <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007018:	e02f      	b.n	800707a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701a:	4b2e      	ldr	r3, [pc, #184]	@ (80070d4 <xTaskResumeAll+0x108>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3318      	adds	r3, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe ffdc 	bl	8005fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe ffd7 	bl	8005fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703a:	4b27      	ldr	r3, [pc, #156]	@ (80070d8 <xTaskResumeAll+0x10c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d903      	bls.n	800704a <xTaskResumeAll+0x7e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	4a24      	ldr	r2, [pc, #144]	@ (80070d8 <xTaskResumeAll+0x10c>)
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4a21      	ldr	r2, [pc, #132]	@ (80070dc <xTaskResumeAll+0x110>)
 8007058:	441a      	add	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7fe ff62 	bl	8005f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	4b1d      	ldr	r3, [pc, #116]	@ (80070e0 <xTaskResumeAll+0x114>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	429a      	cmp	r2, r3
 8007072:	d302      	bcc.n	800707a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007074:	4b1b      	ldr	r3, [pc, #108]	@ (80070e4 <xTaskResumeAll+0x118>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800707a:	4b16      	ldr	r3, [pc, #88]	@ (80070d4 <xTaskResumeAll+0x108>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1cb      	bne.n	800701a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007088:	f000 fb22 	bl	80076d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800708c:	4b16      	ldr	r3, [pc, #88]	@ (80070e8 <xTaskResumeAll+0x11c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d010      	beq.n	80070ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007098:	f000 f838 	bl	800710c <xTaskIncrementTick>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070a2:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <xTaskResumeAll+0x118>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f1      	bne.n	8007098 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <xTaskResumeAll+0x11c>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <xTaskResumeAll+0x118>)
 80070bc:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f001 faad 	bl	800861c <vPortExitCritical>

	return xAlreadyYielded;
 80070c2:	687b      	ldr	r3, [r7, #4]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20001cdc 	.word	0x20001cdc
 80070d0:	20001cb4 	.word	0x20001cb4
 80070d4:	20001c74 	.word	0x20001c74
 80070d8:	20001cbc 	.word	0x20001cbc
 80070dc:	200017e4 	.word	0x200017e4
 80070e0:	200017e0 	.word	0x200017e0
 80070e4:	20001cc8 	.word	0x20001cc8
 80070e8:	20001cc4 	.word	0x20001cc4

080070ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070f2:	4b05      	ldr	r3, [pc, #20]	@ (8007108 <xTaskGetTickCount+0x1c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f8:	687b      	ldr	r3, [r7, #4]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20001cb8 	.word	0x20001cb8

0800710c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007116:	4b40      	ldr	r3, [pc, #256]	@ (8007218 <xTaskIncrementTick+0x10c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d171      	bne.n	8007202 <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800711e:	4b3f      	ldr	r3, [pc, #252]	@ (800721c <xTaskIncrementTick+0x110>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3301      	adds	r3, #1
 8007124:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007126:	4a3d      	ldr	r2, [pc, #244]	@ (800721c <xTaskIncrementTick+0x110>)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d121      	bne.n	8007176 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007132:	4b3b      	ldr	r3, [pc, #236]	@ (8007220 <xTaskIncrementTick+0x114>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <xTaskIncrementTick+0x48>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	603b      	str	r3, [r7, #0]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <xTaskIncrementTick+0x44>
 8007154:	4b32      	ldr	r3, [pc, #200]	@ (8007220 <xTaskIncrementTick+0x114>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	4b32      	ldr	r3, [pc, #200]	@ (8007224 <xTaskIncrementTick+0x118>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a30      	ldr	r2, [pc, #192]	@ (8007220 <xTaskIncrementTick+0x114>)
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4a30      	ldr	r2, [pc, #192]	@ (8007224 <xTaskIncrementTick+0x118>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4b2f      	ldr	r3, [pc, #188]	@ (8007228 <xTaskIncrementTick+0x11c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a2e      	ldr	r2, [pc, #184]	@ (8007228 <xTaskIncrementTick+0x11c>)
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	f000 faad 	bl	80076d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007176:	4b2d      	ldr	r3, [pc, #180]	@ (800722c <xTaskIncrementTick+0x120>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d345      	bcc.n	800720c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007180:	4b27      	ldr	r3, [pc, #156]	@ (8007220 <xTaskIncrementTick+0x114>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718a:	4b28      	ldr	r3, [pc, #160]	@ (800722c <xTaskIncrementTick+0x120>)
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	601a      	str	r2, [r3, #0]
					break;
 8007192:	e03b      	b.n	800720c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b22      	ldr	r3, [pc, #136]	@ (8007220 <xTaskIncrementTick+0x114>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d203      	bcs.n	80071b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ac:	4a1f      	ldr	r2, [pc, #124]	@ (800722c <xTaskIncrementTick+0x120>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071b2:	e02b      	b.n	800720c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe ff13 	bl	8005fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	3318      	adds	r3, #24
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe ff0a 	bl	8005fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d4:	4b16      	ldr	r3, [pc, #88]	@ (8007230 <xTaskIncrementTick+0x124>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d903      	bls.n	80071e4 <xTaskIncrementTick+0xd8>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	4a13      	ldr	r2, [pc, #76]	@ (8007230 <xTaskIncrementTick+0x124>)
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4a10      	ldr	r2, [pc, #64]	@ (8007234 <xTaskIncrementTick+0x128>)
 80071f2:	441a      	add	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fe fe95 	bl	8005f2a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007200:	e7be      	b.n	8007180 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007202:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <xTaskIncrementTick+0x12c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	4a0b      	ldr	r2, [pc, #44]	@ (8007238 <xTaskIncrementTick+0x12c>)
 800720a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800720c:	697b      	ldr	r3, [r7, #20]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20001cdc 	.word	0x20001cdc
 800721c:	20001cb8 	.word	0x20001cb8
 8007220:	20001c6c 	.word	0x20001c6c
 8007224:	20001c70 	.word	0x20001c70
 8007228:	20001ccc 	.word	0x20001ccc
 800722c:	20001cd4 	.word	0x20001cd4
 8007230:	20001cbc 	.word	0x20001cbc
 8007234:	200017e4 	.word	0x200017e4
 8007238:	20001cc4 	.word	0x20001cc4

0800723c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007242:	4b28      	ldr	r3, [pc, #160]	@ (80072e4 <vTaskSwitchContext+0xa8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800724a:	4b27      	ldr	r3, [pc, #156]	@ (80072e8 <vTaskSwitchContext+0xac>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007250:	e042      	b.n	80072d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007252:	4b25      	ldr	r3, [pc, #148]	@ (80072e8 <vTaskSwitchContext+0xac>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007258:	4b24      	ldr	r3, [pc, #144]	@ (80072ec <vTaskSwitchContext+0xb0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e011      	b.n	8007284 <vTaskSwitchContext+0x48>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <vTaskSwitchContext+0x42>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	607b      	str	r3, [r7, #4]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <vTaskSwitchContext+0x3e>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3b01      	subs	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	491a      	ldr	r1, [pc, #104]	@ (80072f0 <vTaskSwitchContext+0xb4>)
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0e3      	beq.n	8007260 <vTaskSwitchContext+0x24>
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4a13      	ldr	r2, [pc, #76]	@ (80072f0 <vTaskSwitchContext+0xb4>)
 80072a4:	4413      	add	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	3308      	adds	r3, #8
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d104      	bne.n	80072c8 <vTaskSwitchContext+0x8c>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	605a      	str	r2, [r3, #4]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	4a09      	ldr	r2, [pc, #36]	@ (80072f4 <vTaskSwitchContext+0xb8>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4a06      	ldr	r2, [pc, #24]	@ (80072ec <vTaskSwitchContext+0xb0>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6013      	str	r3, [r2, #0]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	20001cdc 	.word	0x20001cdc
 80072e8:	20001cc8 	.word	0x20001cc8
 80072ec:	20001cbc 	.word	0x20001cbc
 80072f0:	200017e4 	.word	0x200017e4
 80072f4:	200017e0 	.word	0x200017e0

080072f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007320:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <vTaskPlaceOnEventList+0x48>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3318      	adds	r3, #24
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7fe fe22 	bl	8005f72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800732e:	2101      	movs	r1, #1
 8007330:	6838      	ldr	r0, [r7, #0]
 8007332:	f000 fc5f 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	200017e0 	.word	0x200017e0

08007344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	617b      	str	r3, [r7, #20]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800736e:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <vTaskPlaceOnEventListRestricted+0x54>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3318      	adds	r3, #24
 8007374:	4619      	mov	r1, r3
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7fe fdd7 	bl	8005f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007382:	f04f 33ff 	mov.w	r3, #4294967295
 8007386:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	68b8      	ldr	r0, [r7, #8]
 800738c:	f000 fc32 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>
	}
 8007390:	bf00      	nop
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	200017e0 	.word	0x200017e0

0800739c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	60fb      	str	r3, [r7, #12]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3318      	adds	r3, #24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fe08 	bl	8005fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d4:	4b1d      	ldr	r3, [pc, #116]	@ (800744c <xTaskRemoveFromEventList+0xb0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11d      	bne.n	8007418 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	3304      	adds	r3, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe fdff 	bl	8005fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ea:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <xTaskRemoveFromEventList+0xb4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d903      	bls.n	80073fa <xTaskRemoveFromEventList+0x5e>
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	4a16      	ldr	r2, [pc, #88]	@ (8007450 <xTaskRemoveFromEventList+0xb4>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4a13      	ldr	r2, [pc, #76]	@ (8007454 <xTaskRemoveFromEventList+0xb8>)
 8007408:	441a      	add	r2, r3
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3304      	adds	r3, #4
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f7fe fd8a 	bl	8005f2a <vListInsertEnd>
 8007416:	e005      	b.n	8007424 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	3318      	adds	r3, #24
 800741c:	4619      	mov	r1, r3
 800741e:	480e      	ldr	r0, [pc, #56]	@ (8007458 <xTaskRemoveFromEventList+0xbc>)
 8007420:	f7fe fd83 	bl	8005f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007428:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <xTaskRemoveFromEventList+0xc0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	429a      	cmp	r2, r3
 8007430:	d905      	bls.n	800743e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007432:	2301      	movs	r3, #1
 8007434:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007436:	4b0a      	ldr	r3, [pc, #40]	@ (8007460 <xTaskRemoveFromEventList+0xc4>)
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	e001      	b.n	8007442 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007442:	697b      	ldr	r3, [r7, #20]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20001cdc 	.word	0x20001cdc
 8007450:	20001cbc 	.word	0x20001cbc
 8007454:	200017e4 	.word	0x200017e4
 8007458:	20001c74 	.word	0x20001c74
 800745c:	200017e0 	.word	0x200017e0
 8007460:	20001cc8 	.word	0x20001cc8

08007464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800746c:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <vTaskInternalSetTimeOutState+0x24>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007474:	4b05      	ldr	r3, [pc, #20]	@ (800748c <vTaskInternalSetTimeOutState+0x28>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	20001ccc 	.word	0x20001ccc
 800748c:	20001cb8 	.word	0x20001cb8

08007490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	613b      	str	r3, [r7, #16]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10b      	bne.n	80074d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80074d6:	f001 f86f 	bl	80085b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074da:	4b1d      	ldr	r3, [pc, #116]	@ (8007550 <xTaskCheckForTimeOut+0xc0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d102      	bne.n	80074fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e023      	b.n	8007542 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	4b15      	ldr	r3, [pc, #84]	@ (8007554 <xTaskCheckForTimeOut+0xc4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d007      	beq.n	8007516 <xTaskCheckForTimeOut+0x86>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d302      	bcc.n	8007516 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	e015      	b.n	8007542 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	429a      	cmp	r2, r3
 800751e:	d20b      	bcs.n	8007538 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	1ad2      	subs	r2, r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ff99 	bl	8007464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	e004      	b.n	8007542 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800753e:	2301      	movs	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007542:	f001 f86b 	bl	800861c <vPortExitCritical>

	return xReturn;
 8007546:	69fb      	ldr	r3, [r7, #28]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20001cb8 	.word	0x20001cb8
 8007554:	20001ccc 	.word	0x20001ccc

08007558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800755c:	4b03      	ldr	r3, [pc, #12]	@ (800756c <vTaskMissedYield+0x14>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
}
 8007562:	bf00      	nop
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20001cc8 	.word	0x20001cc8

08007570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007578:	f000 f84c 	bl	8007614 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800757c:	4b04      	ldr	r3, [pc, #16]	@ (8007590 <prvIdleTask+0x20>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800758c:	bf00      	nop
 800758e:	e7f3      	b.n	8007578 <prvIdleTask+0x8>
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	e00c      	b.n	80075ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4a12      	ldr	r2, [pc, #72]	@ (80075f4 <prvInitialiseTaskLists+0x60>)
 80075ac:	4413      	add	r3, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fc8e 	bl	8005ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3301      	adds	r3, #1
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b37      	cmp	r3, #55	@ 0x37
 80075be:	d9ef      	bls.n	80075a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075c0:	480d      	ldr	r0, [pc, #52]	@ (80075f8 <prvInitialiseTaskLists+0x64>)
 80075c2:	f7fe fc85 	bl	8005ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075c6:	480d      	ldr	r0, [pc, #52]	@ (80075fc <prvInitialiseTaskLists+0x68>)
 80075c8:	f7fe fc82 	bl	8005ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075cc:	480c      	ldr	r0, [pc, #48]	@ (8007600 <prvInitialiseTaskLists+0x6c>)
 80075ce:	f7fe fc7f 	bl	8005ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075d2:	480c      	ldr	r0, [pc, #48]	@ (8007604 <prvInitialiseTaskLists+0x70>)
 80075d4:	f7fe fc7c 	bl	8005ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075d8:	480b      	ldr	r0, [pc, #44]	@ (8007608 <prvInitialiseTaskLists+0x74>)
 80075da:	f7fe fc79 	bl	8005ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075de:	4b0b      	ldr	r3, [pc, #44]	@ (800760c <prvInitialiseTaskLists+0x78>)
 80075e0:	4a05      	ldr	r2, [pc, #20]	@ (80075f8 <prvInitialiseTaskLists+0x64>)
 80075e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <prvInitialiseTaskLists+0x7c>)
 80075e6:	4a05      	ldr	r2, [pc, #20]	@ (80075fc <prvInitialiseTaskLists+0x68>)
 80075e8:	601a      	str	r2, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	200017e4 	.word	0x200017e4
 80075f8:	20001c44 	.word	0x20001c44
 80075fc:	20001c58 	.word	0x20001c58
 8007600:	20001c74 	.word	0x20001c74
 8007604:	20001c88 	.word	0x20001c88
 8007608:	20001ca0 	.word	0x20001ca0
 800760c:	20001c6c 	.word	0x20001c6c
 8007610:	20001c70 	.word	0x20001c70

08007614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800761a:	e019      	b.n	8007650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800761c:	f000 ffcc 	bl	80085b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007620:	4b10      	ldr	r3, [pc, #64]	@ (8007664 <prvCheckTasksWaitingTermination+0x50>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fcd9 	bl	8005fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007632:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <prvCheckTasksWaitingTermination+0x54>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3b01      	subs	r3, #1
 8007638:	4a0b      	ldr	r2, [pc, #44]	@ (8007668 <prvCheckTasksWaitingTermination+0x54>)
 800763a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800763c:	4b0b      	ldr	r3, [pc, #44]	@ (800766c <prvCheckTasksWaitingTermination+0x58>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3b01      	subs	r3, #1
 8007642:	4a0a      	ldr	r2, [pc, #40]	@ (800766c <prvCheckTasksWaitingTermination+0x58>)
 8007644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007646:	f000 ffe9 	bl	800861c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f810 	bl	8007670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007650:	4b06      	ldr	r3, [pc, #24]	@ (800766c <prvCheckTasksWaitingTermination+0x58>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e1      	bne.n	800761c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20001c88 	.word	0x20001c88
 8007668:	20001cb4 	.word	0x20001cb4
 800766c:	20001c9c 	.word	0x20001c9c

08007670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800767e:	2b00      	cmp	r3, #0
 8007680:	d108      	bne.n	8007694 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007686:	4618      	mov	r0, r3
 8007688:	f001 f986 	bl	8008998 <vPortFree>
				vPortFree( pxTCB );
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f983 	bl	8008998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007692:	e019      	b.n	80076c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800769a:	2b01      	cmp	r3, #1
 800769c:	d103      	bne.n	80076a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f97a 	bl	8008998 <vPortFree>
	}
 80076a4:	e010      	b.n	80076c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d00b      	beq.n	80076c8 <prvDeleteTCB+0x58>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <prvDeleteTCB+0x54>
	}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <prvResetNextTaskUnblockTime+0x38>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <prvResetNextTaskUnblockTime+0x3c>)
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076e8:	e008      	b.n	80076fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ea:	4b07      	ldr	r3, [pc, #28]	@ (8007708 <prvResetNextTaskUnblockTime+0x38>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4a04      	ldr	r2, [pc, #16]	@ (800770c <prvResetNextTaskUnblockTime+0x3c>)
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	20001c6c 	.word	0x20001c6c
 800770c:	20001cd4 	.word	0x20001cd4

08007710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007716:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <xTaskGetSchedulerState+0x34>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d102      	bne.n	8007724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800771e:	2301      	movs	r3, #1
 8007720:	607b      	str	r3, [r7, #4]
 8007722:	e008      	b.n	8007736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007724:	4b08      	ldr	r3, [pc, #32]	@ (8007748 <xTaskGetSchedulerState+0x38>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800772c:	2302      	movs	r3, #2
 800772e:	607b      	str	r3, [r7, #4]
 8007730:	e001      	b.n	8007736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007732:	2300      	movs	r3, #0
 8007734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007736:	687b      	ldr	r3, [r7, #4]
	}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20001cc0 	.word	0x20001cc0
 8007748:	20001cdc 	.word	0x20001cdc

0800774c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d058      	beq.n	8007814 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007762:	4b2f      	ldr	r3, [pc, #188]	@ (8007820 <xTaskPriorityDisinherit+0xd4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	429a      	cmp	r2, r3
 800776a:	d00b      	beq.n	8007784 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10b      	bne.n	80077a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60bb      	str	r3, [r7, #8]
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	e7fd      	b.n	80077a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d02c      	beq.n	8007814 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d128      	bne.n	8007814 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fc0c 	bl	8005fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <xTaskPriorityDisinherit+0xd8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d903      	bls.n	80077f4 <xTaskPriorityDisinherit+0xa8>
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007824 <xTaskPriorityDisinherit+0xd8>)
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4a09      	ldr	r2, [pc, #36]	@ (8007828 <xTaskPriorityDisinherit+0xdc>)
 8007802:	441a      	add	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fe fb8d 	bl	8005f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007814:	697b      	ldr	r3, [r7, #20]
	}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200017e0 	.word	0x200017e0
 8007824:	20001cbc 	.word	0x20001cbc
 8007828:	200017e4 	.word	0x200017e4

0800782c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800783a:	f000 febd 	bl	80085b8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800783e:	4b26      	ldr	r3, [pc, #152]	@ (80078d8 <xTaskNotifyWait+0xac>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d01a      	beq.n	8007882 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800784c:	4b22      	ldr	r3, [pc, #136]	@ (80078d8 <xTaskNotifyWait+0xac>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	43d2      	mvns	r2, r2
 8007856:	400a      	ands	r2, r1
 8007858:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800785a:	4b1f      	ldr	r3, [pc, #124]	@ (80078d8 <xTaskNotifyWait+0xac>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800786a:	2101      	movs	r1, #1
 800786c:	6838      	ldr	r0, [r7, #0]
 800786e:	f000 f9c1 	bl	8007bf4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007872:	4b1a      	ldr	r3, [pc, #104]	@ (80078dc <xTaskNotifyWait+0xb0>)
 8007874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007882:	f000 fecb 	bl	800861c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007886:	f000 fe97 	bl	80085b8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007890:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <xTaskNotifyWait+0xac>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800789a:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <xTaskNotifyWait+0xac>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e008      	b.n	80078c0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80078ae:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <xTaskNotifyWait+0xac>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	43d2      	mvns	r2, r2
 80078b8:	400a      	ands	r2, r1
 80078ba:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 80078bc:	2301      	movs	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <xTaskNotifyWait+0xac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80078ca:	f000 fea7 	bl	800861c <vPortExitCritical>

		return xReturn;
 80078ce:	697b      	ldr	r3, [r7, #20]
	}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200017e0 	.word	0x200017e0
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	@ 0x28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80078f0:	2301      	movs	r3, #1
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <xTaskGenericNotify+0x32>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	61bb      	str	r3, [r7, #24]
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007916:	f000 fe4f 	bl	80085b8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800792e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	2b04      	cmp	r3, #4
 800793c:	d827      	bhi.n	800798e <xTaskGenericNotify+0xae>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <xTaskGenericNotify+0x64>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	080079b1 	.word	0x080079b1
 8007948:	08007959 	.word	0x08007959
 800794c:	08007967 	.word	0x08007967
 8007950:	08007973 	.word	0x08007973
 8007954:	0800797b 	.word	0x0800797b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	431a      	orrs	r2, r3
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007964:	e027      	b.n	80079b6 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007970:	e021      	b.n	80079b6 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007978:	e01d      	b.n	80079b6 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800797a:	7ffb      	ldrb	r3, [r7, #31]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d003      	beq.n	8007988 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007986:	e016      	b.n	80079b6 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007988:	2300      	movs	r3, #0
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800798c:	e013      	b.n	80079b6 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d00d      	beq.n	80079b4 <xTaskGenericNotify+0xd4>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	617b      	str	r3, [r7, #20]
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	e7fd      	b.n	80079ac <xTaskGenericNotify+0xcc>
					break;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <xTaskGenericNotify+0xd6>

					break;
 80079b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079b6:	7ffb      	ldrb	r3, [r7, #31]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d12e      	bne.n	8007a1a <xTaskGenericNotify+0x13a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	3304      	adds	r3, #4
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fb0f 	bl	8005fe4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ca:	4b17      	ldr	r3, [pc, #92]	@ (8007a28 <xTaskGenericNotify+0x148>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d903      	bls.n	80079da <xTaskGenericNotify+0xfa>
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	4a14      	ldr	r2, [pc, #80]	@ (8007a28 <xTaskGenericNotify+0x148>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <xTaskGenericNotify+0x14c>)
 80079e8:	441a      	add	r2, r3
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe fa9a 	bl	8005f2a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <xTaskGenericNotify+0x136>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	613b      	str	r3, [r7, #16]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <xTaskGenericNotify+0x150>)
 8007a18:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007a1a:	f000 fdff 	bl	800861c <vPortExitCritical>

		return xReturn;
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3728      	adds	r7, #40	@ 0x28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20001cbc 	.word	0x20001cbc
 8007a2c:	200017e4 	.word	0x200017e4
 8007a30:	200017e0 	.word	0x200017e0

08007a34 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08e      	sub	sp, #56	@ 0x38
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	4613      	mov	r3, r2
 8007a42:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007a44:	2301      	movs	r3, #1
 8007a46:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10b      	bne.n	8007a66 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	e7fd      	b.n	8007a62 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a66:	f000 fe87 	bl	8008778 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	623a      	str	r2, [r7, #32]
 8007a84:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007a86:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d829      	bhi.n	8007b04 <xTaskGenericNotifyFromISR+0xd0>
 8007ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <xTaskGenericNotifyFromISR+0x84>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007b27 	.word	0x08007b27
 8007abc:	08007acd 	.word	0x08007acd
 8007ac0:	08007adb 	.word	0x08007adb
 8007ac4:	08007ae7 	.word	0x08007ae7
 8007ac8:	08007aef 	.word	0x08007aef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007ad8:	e028      	b.n	8007b2c <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007ae4:	e022      	b.n	8007b2c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007aec:	e01e      	b.n	8007b2c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d003      	beq.n	8007afe <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007afc:	e016      	b.n	8007b2c <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007b02:	e013      	b.n	8007b2c <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0c:	d00d      	beq.n	8007b2a <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	61bb      	str	r3, [r7, #24]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <xTaskGenericNotifyFromISR+0xee>
					break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <xTaskGenericNotifyFromISR+0xf8>
					break;
 8007b2a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d147      	bne.n	8007bc4 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	617b      	str	r3, [r7, #20]
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	e7fd      	b.n	8007b50 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b54:	4b21      	ldr	r3, [pc, #132]	@ (8007bdc <xTaskGenericNotifyFromISR+0x1a8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d11d      	bne.n	8007b98 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fa3f 	bl	8005fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007be0 <xTaskGenericNotifyFromISR+0x1ac>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d903      	bls.n	8007b7a <xTaskGenericNotifyFromISR+0x146>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	4a1a      	ldr	r2, [pc, #104]	@ (8007be0 <xTaskGenericNotifyFromISR+0x1ac>)
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4a17      	ldr	r2, [pc, #92]	@ (8007be4 <xTaskGenericNotifyFromISR+0x1b0>)
 8007b88:	441a      	add	r2, r3
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f7fe f9ca 	bl	8005f2a <vListInsertEnd>
 8007b96:	e005      	b.n	8007ba4 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4812      	ldr	r0, [pc, #72]	@ (8007be8 <xTaskGenericNotifyFromISR+0x1b4>)
 8007ba0:	f7fe f9c3 	bl	8005f2a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba8:	4b10      	ldr	r3, [pc, #64]	@ (8007bec <xTaskGenericNotifyFromISR+0x1b8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d908      	bls.n	8007bc4 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <xTaskGenericNotifyFromISR+0x1bc>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3738      	adds	r7, #56	@ 0x38
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001cdc 	.word	0x20001cdc
 8007be0:	20001cbc 	.word	0x20001cbc
 8007be4:	200017e4 	.word	0x200017e4
 8007be8:	20001c74 	.word	0x20001c74
 8007bec:	200017e0 	.word	0x200017e0
 8007bf0:	20001cc8 	.word	0x20001cc8

08007bf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bfe:	4b21      	ldr	r3, [pc, #132]	@ (8007c84 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c04:	4b20      	ldr	r3, [pc, #128]	@ (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe f9ea 	bl	8005fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d10a      	bne.n	8007c2e <prvAddCurrentTaskToDelayedList+0x3a>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4819      	ldr	r0, [pc, #100]	@ (8007c8c <prvAddCurrentTaskToDelayedList+0x98>)
 8007c28:	f7fe f97f 	bl	8005f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c2c:	e026      	b.n	8007c7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4413      	add	r3, r2
 8007c34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c36:	4b14      	ldr	r3, [pc, #80]	@ (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d209      	bcs.n	8007c5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c46:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fe f98d 	bl	8005f72 <vListInsert>
}
 8007c58:	e010      	b.n	8007c7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fe f983 	bl	8005f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d202      	bcs.n	8007c7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c76:	4a08      	ldr	r2, [pc, #32]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20001cb8 	.word	0x20001cb8
 8007c88:	200017e0 	.word	0x200017e0
 8007c8c:	20001ca0 	.word	0x20001ca0
 8007c90:	20001c70 	.word	0x20001c70
 8007c94:	20001c6c 	.word	0x20001c6c
 8007c98:	20001cd4 	.word	0x20001cd4

08007c9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08a      	sub	sp, #40	@ 0x28
 8007ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ca6:	f000 fb13 	bl	80082d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007caa:	4b1d      	ldr	r3, [pc, #116]	@ (8007d20 <xTimerCreateTimerTask+0x84>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d021      	beq.n	8007cf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cba:	1d3a      	adds	r2, r7, #4
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	f107 030c 	add.w	r3, r7, #12
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fe f8e9 	bl	8005e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	9202      	str	r2, [sp, #8]
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	460a      	mov	r2, r1
 8007cdc:	4911      	ldr	r1, [pc, #68]	@ (8007d24 <xTimerCreateTimerTask+0x88>)
 8007cde:	4812      	ldr	r0, [pc, #72]	@ (8007d28 <xTimerCreateTimerTask+0x8c>)
 8007ce0:	f7fe ff32 	bl	8006b48 <xTaskCreateStatic>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4a11      	ldr	r2, [pc, #68]	@ (8007d2c <xTimerCreateTimerTask+0x90>)
 8007ce8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cea:	4b10      	ldr	r3, [pc, #64]	@ (8007d2c <xTimerCreateTimerTask+0x90>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	613b      	str	r3, [r7, #16]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d14:	697b      	ldr	r3, [r7, #20]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20001d10 	.word	0x20001d10
 8007d24:	08008cc8 	.word	0x08008cc8
 8007d28:	08007e69 	.word	0x08007e69
 8007d2c:	20001d14 	.word	0x20001d14

08007d30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08a      	sub	sp, #40	@ 0x28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10b      	bne.n	8007d60 <xTimerGenericCommand+0x30>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	623b      	str	r3, [r7, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d60:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <xTimerGenericCommand+0x98>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02a      	beq.n	8007dbe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	dc18      	bgt.n	8007dac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d7a:	f7ff fcc9 	bl	8007710 <xTaskGetSchedulerState>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d109      	bne.n	8007d98 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d84:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <xTimerGenericCommand+0x98>)
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	f107 0110 	add.w	r1, r7, #16
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d90:	f7fe fa8a 	bl	80062a8 <xQueueGenericSend>
 8007d94:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d96:	e012      	b.n	8007dbe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d98:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc8 <xTimerGenericCommand+0x98>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	f107 0110 	add.w	r1, r7, #16
 8007da0:	2300      	movs	r3, #0
 8007da2:	2200      	movs	r2, #0
 8007da4:	f7fe fa80 	bl	80062a8 <xQueueGenericSend>
 8007da8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007daa:	e008      	b.n	8007dbe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <xTimerGenericCommand+0x98>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	f107 0110 	add.w	r1, r7, #16
 8007db4:	2300      	movs	r3, #0
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	f7fe fb60 	bl	800647c <xQueueGenericSendFromISR>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3728      	adds	r7, #40	@ 0x28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20001d10 	.word	0x20001d10

08007dcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd6:	4b23      	ldr	r3, [pc, #140]	@ (8007e64 <prvProcessExpiredTimer+0x98>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe f8fd 	bl	8005fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d023      	beq.n	8007e40 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	18d1      	adds	r1, r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	6978      	ldr	r0, [r7, #20]
 8007e06:	f000 f8d5 	bl	8007fb4 <prvInsertTimerInActiveList>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d020      	beq.n	8007e52 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e10:	2300      	movs	r3, #0
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2300      	movs	r3, #0
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6978      	ldr	r0, [r7, #20]
 8007e1c:	f7ff ff88 	bl	8007d30 <xTimerGenericCommand>
 8007e20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d114      	bne.n	8007e52 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	60fb      	str	r3, [r7, #12]
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	e7fd      	b.n	8007e3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	6978      	ldr	r0, [r7, #20]
 8007e58:	4798      	blx	r3
}
 8007e5a:	bf00      	nop
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20001d08 	.word	0x20001d08

08007e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f859 	bl	8007f2c <prvGetNextExpireTime>
 8007e7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f805 	bl	8007e90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e86:	f000 f8d7 	bl	8008038 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e8a:	bf00      	nop
 8007e8c:	e7f0      	b.n	8007e70 <prvTimerTask+0x8>
	...

08007e90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e9a:	f7ff f889 	bl	8006fb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f866 	bl	8007f74 <prvSampleTimeNow>
 8007ea8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d130      	bne.n	8007f12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <prvProcessTimerOrBlockTask+0x3c>
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d806      	bhi.n	8007ecc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ebe:	f7ff f885 	bl	8006fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff81 	bl	8007dcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eca:	e024      	b.n	8007f16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ed2:	4b13      	ldr	r3, [pc, #76]	@ (8007f20 <prvProcessTimerOrBlockTask+0x90>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <prvProcessTimerOrBlockTask+0x50>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <prvProcessTimerOrBlockTask+0x52>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <prvProcessTimerOrBlockTask+0x94>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f7fe fdf5 	bl	8006ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ef6:	f7ff f869 	bl	8006fcc <xTaskResumeAll>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f00:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <prvProcessTimerOrBlockTask+0x98>)
 8007f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
}
 8007f10:	e001      	b.n	8007f16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f12:	f7ff f85b 	bl	8006fcc <xTaskResumeAll>
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20001d0c 	.word	0x20001d0c
 8007f24:	20001d10 	.word	0x20001d10
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f34:	4b0e      	ldr	r3, [pc, #56]	@ (8007f70 <prvGetNextExpireTime+0x44>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <prvGetNextExpireTime+0x16>
 8007f3e:	2201      	movs	r2, #1
 8007f40:	e000      	b.n	8007f44 <prvGetNextExpireTime+0x18>
 8007f42:	2200      	movs	r2, #0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d105      	bne.n	8007f5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f50:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <prvGetNextExpireTime+0x44>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e001      	b.n	8007f60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f60:	68fb      	ldr	r3, [r7, #12]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20001d08 	.word	0x20001d08

08007f74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f7c:	f7ff f8b6 	bl	80070ec <xTaskGetTickCount>
 8007f80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f82:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <prvSampleTimeNow+0x3c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d205      	bcs.n	8007f98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f8c:	f000 f93a 	bl	8008204 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f9e:	4a04      	ldr	r2, [pc, #16]	@ (8007fb0 <prvSampleTimeNow+0x3c>)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20001d18 	.word	0x20001d18

08007fb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d812      	bhi.n	8008000 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d302      	bcc.n	8007fee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	e01b      	b.n	8008026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fee:	4b10      	ldr	r3, [pc, #64]	@ (8008030 <prvInsertTimerInActiveList+0x7c>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fd ffba 	bl	8005f72 <vListInsert>
 8007ffe:	e012      	b.n	8008026 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	429a      	cmp	r2, r3
 8008006:	d206      	bcs.n	8008016 <prvInsertTimerInActiveList+0x62>
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d302      	bcc.n	8008016 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008010:	2301      	movs	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e007      	b.n	8008026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008016:	4b07      	ldr	r3, [pc, #28]	@ (8008034 <prvInsertTimerInActiveList+0x80>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7fd ffa6 	bl	8005f72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008026:	697b      	ldr	r3, [r7, #20]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20001d0c 	.word	0x20001d0c
 8008034:	20001d08 	.word	0x20001d08

08008038 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08e      	sub	sp, #56	@ 0x38
 800803c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800803e:	e0ce      	b.n	80081de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	da19      	bge.n	800807a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008046:	1d3b      	adds	r3, r7, #4
 8008048:	3304      	adds	r3, #4
 800804a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10b      	bne.n	800806a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	61fb      	str	r3, [r7, #28]
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	e7fd      	b.n	8008066 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800806a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008070:	6850      	ldr	r0, [r2, #4]
 8008072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	4611      	mov	r1, r2
 8008078:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f2c0 80ae 	blt.w	80081de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008090:	3304      	adds	r3, #4
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd ffa6 	bl	8005fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008098:	463b      	mov	r3, r7
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff ff6a 	bl	8007f74 <prvSampleTimeNow>
 80080a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	f200 8097 	bhi.w	80081d8 <prvProcessReceivedCommands+0x1a0>
 80080aa:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <prvProcessReceivedCommands+0x78>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080d9 	.word	0x080080d9
 80080bc:	0800814f 	.word	0x0800814f
 80080c0:	08008163 	.word	0x08008163
 80080c4:	080081af 	.word	0x080081af
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	080080d9 	.word	0x080080d9
 80080d0:	0800814f 	.word	0x0800814f
 80080d4:	08008163 	.word	0x08008163
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	18d1      	adds	r1, r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080f8:	f7ff ff5c 	bl	8007fb4 <prvInsertTimerInActiveList>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d06c      	beq.n	80081dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008108:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d061      	beq.n	80081dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	441a      	add	r2, r3
 8008120:	2300      	movs	r3, #0
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	2300      	movs	r3, #0
 8008126:	2100      	movs	r1, #0
 8008128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812a:	f7ff fe01 	bl	8007d30 <xTimerGenericCommand>
 800812e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d152      	bne.n	80081dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	61bb      	str	r3, [r7, #24]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008160:	e03d      	b.n	80081de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008168:	f043 0301 	orr.w	r3, r3, #1
 800816c:	b2da      	uxtb	r2, r3
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008178:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	617b      	str	r3, [r7, #20]
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	e7fd      	b.n	8008196 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	18d1      	adds	r1, r2, r3
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a8:	f7ff ff04 	bl	8007fb4 <prvInsertTimerInActiveList>
					break;
 80081ac:	e017      	b.n	80081de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d103      	bne.n	80081c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80081bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081be:	f000 fbeb 	bl	8008998 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081c2:	e00c      	b.n	80081de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081d6:	e002      	b.n	80081de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80081d8:	bf00      	nop
 80081da:	e000      	b.n	80081de <prvProcessReceivedCommands+0x1a6>
					break;
 80081dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081de:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <prvProcessReceivedCommands+0x1c8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	1d39      	adds	r1, r7, #4
 80081e4:	2200      	movs	r2, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe f9e6 	bl	80065b8 <xQueueReceive>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f47f af26 	bne.w	8008040 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	3730      	adds	r7, #48	@ 0x30
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20001d10 	.word	0x20001d10

08008204 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800820a:	e049      	b.n	80082a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800820c:	4b2e      	ldr	r3, [pc, #184]	@ (80082c8 <prvSwitchTimerLists+0xc4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008216:	4b2c      	ldr	r3, [pc, #176]	@ (80082c8 <prvSwitchTimerLists+0xc4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3304      	adds	r3, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f7fd fedd 	bl	8005fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d02f      	beq.n	80082a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	429a      	cmp	r2, r3
 8008250:	d90e      	bls.n	8008270 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800825e:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <prvSwitchTimerLists+0xc4>)
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3304      	adds	r3, #4
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7fd fe82 	bl	8005f72 <vListInsert>
 800826e:	e017      	b.n	80082a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008270:	2300      	movs	r3, #0
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	2300      	movs	r3, #0
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	2100      	movs	r1, #0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff fd58 	bl	8007d30 <xTimerGenericCommand>
 8008280:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	603b      	str	r3, [r7, #0]
}
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	e7fd      	b.n	800829c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082a0:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <prvSwitchTimerLists+0xc4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1b0      	bne.n	800820c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082aa:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <prvSwitchTimerLists+0xc4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082b0:	4b06      	ldr	r3, [pc, #24]	@ (80082cc <prvSwitchTimerLists+0xc8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a04      	ldr	r2, [pc, #16]	@ (80082c8 <prvSwitchTimerLists+0xc4>)
 80082b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082b8:	4a04      	ldr	r2, [pc, #16]	@ (80082cc <prvSwitchTimerLists+0xc8>)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6013      	str	r3, [r2, #0]
}
 80082be:	bf00      	nop
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20001d08 	.word	0x20001d08
 80082cc:	20001d0c 	.word	0x20001d0c

080082d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082d6:	f000 f96f 	bl	80085b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082da:	4b15      	ldr	r3, [pc, #84]	@ (8008330 <prvCheckForValidListAndQueue+0x60>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d120      	bne.n	8008324 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082e2:	4814      	ldr	r0, [pc, #80]	@ (8008334 <prvCheckForValidListAndQueue+0x64>)
 80082e4:	f7fd fdf4 	bl	8005ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082e8:	4813      	ldr	r0, [pc, #76]	@ (8008338 <prvCheckForValidListAndQueue+0x68>)
 80082ea:	f7fd fdf1 	bl	8005ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082ee:	4b13      	ldr	r3, [pc, #76]	@ (800833c <prvCheckForValidListAndQueue+0x6c>)
 80082f0:	4a10      	ldr	r2, [pc, #64]	@ (8008334 <prvCheckForValidListAndQueue+0x64>)
 80082f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082f4:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <prvCheckForValidListAndQueue+0x70>)
 80082f6:	4a10      	ldr	r2, [pc, #64]	@ (8008338 <prvCheckForValidListAndQueue+0x68>)
 80082f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082fa:	2300      	movs	r3, #0
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	4b11      	ldr	r3, [pc, #68]	@ (8008344 <prvCheckForValidListAndQueue+0x74>)
 8008300:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <prvCheckForValidListAndQueue+0x78>)
 8008302:	2110      	movs	r1, #16
 8008304:	200a      	movs	r0, #10
 8008306:	f7fd fef3 	bl	80060f0 <xQueueGenericCreateStatic>
 800830a:	4603      	mov	r3, r0
 800830c:	4a08      	ldr	r2, [pc, #32]	@ (8008330 <prvCheckForValidListAndQueue+0x60>)
 800830e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008310:	4b07      	ldr	r3, [pc, #28]	@ (8008330 <prvCheckForValidListAndQueue+0x60>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008318:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <prvCheckForValidListAndQueue+0x60>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	490b      	ldr	r1, [pc, #44]	@ (800834c <prvCheckForValidListAndQueue+0x7c>)
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fbb4 	bl	8006a8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008324:	f000 f97a 	bl	800861c <vPortExitCritical>
}
 8008328:	bf00      	nop
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20001d10 	.word	0x20001d10
 8008334:	20001ce0 	.word	0x20001ce0
 8008338:	20001cf4 	.word	0x20001cf4
 800833c:	20001d08 	.word	0x20001d08
 8008340:	20001d0c 	.word	0x20001d0c
 8008344:	20001dbc 	.word	0x20001dbc
 8008348:	20001d1c 	.word	0x20001d1c
 800834c:	08008cd0 	.word	0x08008cd0

08008350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3b04      	subs	r3, #4
 8008360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b04      	subs	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f023 0201 	bic.w	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3b04      	subs	r3, #4
 800837e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008380:	4a0c      	ldr	r2, [pc, #48]	@ (80083b4 <pxPortInitialiseStack+0x64>)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3b14      	subs	r3, #20
 800838a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3b04      	subs	r3, #4
 8008396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f06f 0202 	mvn.w	r2, #2
 800839e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3b20      	subs	r3, #32
 80083a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083a6:	68fb      	ldr	r3, [r7, #12]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	080083b9 	.word	0x080083b9

080083b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083c2:	4b13      	ldr	r3, [pc, #76]	@ (8008410 <prvTaskExitError+0x58>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d00b      	beq.n	80083e4 <prvTaskExitError+0x2c>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60fb      	str	r3, [r7, #12]
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	e7fd      	b.n	80083e0 <prvTaskExitError+0x28>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60bb      	str	r3, [r7, #8]
}
 80083f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083f8:	bf00      	nop
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0fc      	beq.n	80083fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	2000000c 	.word	0x2000000c
	...

08008420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008420:	4b07      	ldr	r3, [pc, #28]	@ (8008440 <pxCurrentTCBConst2>)
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	6808      	ldr	r0, [r1, #0]
 8008426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	f380 8809 	msr	PSP, r0
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8811 	msr	BASEPRI, r0
 800843a:	4770      	bx	lr
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst2>:
 8008440:	200017e0 	.word	0x200017e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008448:	4808      	ldr	r0, [pc, #32]	@ (800846c <prvPortStartFirstTask+0x24>)
 800844a:	6800      	ldr	r0, [r0, #0]
 800844c:	6800      	ldr	r0, [r0, #0]
 800844e:	f380 8808 	msr	MSP, r0
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8814 	msr	CONTROL, r0
 800845a:	b662      	cpsie	i
 800845c:	b661      	cpsie	f
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	df00      	svc	0
 8008468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800846a:	bf00      	nop
 800846c:	e000ed08 	.word	0xe000ed08

08008470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008476:	4b47      	ldr	r3, [pc, #284]	@ (8008594 <xPortStartScheduler+0x124>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a47      	ldr	r2, [pc, #284]	@ (8008598 <xPortStartScheduler+0x128>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10b      	bne.n	8008498 <xPortStartScheduler+0x28>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008498:	4b3e      	ldr	r3, [pc, #248]	@ (8008594 <xPortStartScheduler+0x124>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3f      	ldr	r2, [pc, #252]	@ (800859c <xPortStartScheduler+0x12c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d10b      	bne.n	80084ba <xPortStartScheduler+0x4a>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60fb      	str	r3, [r7, #12]
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	e7fd      	b.n	80084b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084ba:	4b39      	ldr	r3, [pc, #228]	@ (80085a0 <xPortStartScheduler+0x130>)
 80084bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	22ff      	movs	r2, #255	@ 0xff
 80084ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	4b31      	ldr	r3, [pc, #196]	@ (80085a4 <xPortStartScheduler+0x134>)
 80084e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084e2:	4b31      	ldr	r3, [pc, #196]	@ (80085a8 <xPortStartScheduler+0x138>)
 80084e4:	2207      	movs	r2, #7
 80084e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084e8:	e009      	b.n	80084fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80084ea:	4b2f      	ldr	r3, [pc, #188]	@ (80085a8 <xPortStartScheduler+0x138>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	4a2d      	ldr	r2, [pc, #180]	@ (80085a8 <xPortStartScheduler+0x138>)
 80084f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008506:	2b80      	cmp	r3, #128	@ 0x80
 8008508:	d0ef      	beq.n	80084ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800850a:	4b27      	ldr	r3, [pc, #156]	@ (80085a8 <xPortStartScheduler+0x138>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f1c3 0307 	rsb	r3, r3, #7
 8008512:	2b04      	cmp	r3, #4
 8008514:	d00b      	beq.n	800852e <xPortStartScheduler+0xbe>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60bb      	str	r3, [r7, #8]
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	e7fd      	b.n	800852a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800852e:	4b1e      	ldr	r3, [pc, #120]	@ (80085a8 <xPortStartScheduler+0x138>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	4a1c      	ldr	r2, [pc, #112]	@ (80085a8 <xPortStartScheduler+0x138>)
 8008536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008538:	4b1b      	ldr	r3, [pc, #108]	@ (80085a8 <xPortStartScheduler+0x138>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008540:	4a19      	ldr	r2, [pc, #100]	@ (80085a8 <xPortStartScheduler+0x138>)
 8008542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	b2da      	uxtb	r2, r3
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800854c:	4b17      	ldr	r3, [pc, #92]	@ (80085ac <xPortStartScheduler+0x13c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a16      	ldr	r2, [pc, #88]	@ (80085ac <xPortStartScheduler+0x13c>)
 8008552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008558:	4b14      	ldr	r3, [pc, #80]	@ (80085ac <xPortStartScheduler+0x13c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a13      	ldr	r2, [pc, #76]	@ (80085ac <xPortStartScheduler+0x13c>)
 800855e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008564:	f000 f8da 	bl	800871c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008568:	4b11      	ldr	r3, [pc, #68]	@ (80085b0 <xPortStartScheduler+0x140>)
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800856e:	f000 f8f9 	bl	8008764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008572:	4b10      	ldr	r3, [pc, #64]	@ (80085b4 <xPortStartScheduler+0x144>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a0f      	ldr	r2, [pc, #60]	@ (80085b4 <xPortStartScheduler+0x144>)
 8008578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800857c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800857e:	f7ff ff63 	bl	8008448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008582:	f7fe fe5b 	bl	800723c <vTaskSwitchContext>
	prvTaskExitError();
 8008586:	f7ff ff17 	bl	80083b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	e000ed00 	.word	0xe000ed00
 8008598:	410fc271 	.word	0x410fc271
 800859c:	410fc270 	.word	0x410fc270
 80085a0:	e000e400 	.word	0xe000e400
 80085a4:	20001e0c 	.word	0x20001e0c
 80085a8:	20001e10 	.word	0x20001e10
 80085ac:	e000ed20 	.word	0xe000ed20
 80085b0:	2000000c 	.word	0x2000000c
 80085b4:	e000ef34 	.word	0xe000ef34

080085b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	607b      	str	r3, [r7, #4]
}
 80085d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085d2:	4b10      	ldr	r3, [pc, #64]	@ (8008614 <vPortEnterCritical+0x5c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	4a0e      	ldr	r2, [pc, #56]	@ (8008614 <vPortEnterCritical+0x5c>)
 80085da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <vPortEnterCritical+0x5c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d110      	bne.n	8008606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <vPortEnterCritical+0x60>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <vPortEnterCritical+0x4e>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	603b      	str	r3, [r7, #0]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <vPortEnterCritical+0x4a>
	}
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008622:	4b12      	ldr	r3, [pc, #72]	@ (800866c <vPortExitCritical+0x50>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <vPortExitCritical+0x26>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	607b      	str	r3, [r7, #4]
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	e7fd      	b.n	800863e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008642:	4b0a      	ldr	r3, [pc, #40]	@ (800866c <vPortExitCritical+0x50>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3b01      	subs	r3, #1
 8008648:	4a08      	ldr	r2, [pc, #32]	@ (800866c <vPortExitCritical+0x50>)
 800864a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800864c:	4b07      	ldr	r3, [pc, #28]	@ (800866c <vPortExitCritical+0x50>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d105      	bne.n	8008660 <vPortExitCritical+0x44>
 8008654:	2300      	movs	r3, #0
 8008656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f383 8811 	msr	BASEPRI, r3
}
 800865e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	2000000c 	.word	0x2000000c

08008670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008670:	f3ef 8009 	mrs	r0, PSP
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	4b15      	ldr	r3, [pc, #84]	@ (80086d0 <pxCurrentTCBConst>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	f01e 0f10 	tst.w	lr, #16
 8008680:	bf08      	it	eq
 8008682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868a:	6010      	str	r0, [r2, #0]
 800868c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008694:	f380 8811 	msr	BASEPRI, r0
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f7fe fdcc 	bl	800723c <vTaskSwitchContext>
 80086a4:	f04f 0000 	mov.w	r0, #0
 80086a8:	f380 8811 	msr	BASEPRI, r0
 80086ac:	bc09      	pop	{r0, r3}
 80086ae:	6819      	ldr	r1, [r3, #0]
 80086b0:	6808      	ldr	r0, [r1, #0]
 80086b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b6:	f01e 0f10 	tst.w	lr, #16
 80086ba:	bf08      	it	eq
 80086bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086c0:	f380 8809 	msr	PSP, r0
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	f3af 8000 	nop.w

080086d0 <pxCurrentTCBConst>:
 80086d0:	200017e0 	.word	0x200017e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop

080086d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
}
 80086f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086f2:	f7fe fd0b 	bl	800710c <xTaskIncrementTick>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086fc:	4b06      	ldr	r3, [pc, #24]	@ (8008718 <xPortSysTickHandler+0x40>)
 80086fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	2300      	movs	r3, #0
 8008706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f383 8811 	msr	BASEPRI, r3
}
 800870e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008720:	4b0b      	ldr	r3, [pc, #44]	@ (8008750 <vPortSetupTimerInterrupt+0x34>)
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008726:	4b0b      	ldr	r3, [pc, #44]	@ (8008754 <vPortSetupTimerInterrupt+0x38>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800872c:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <vPortSetupTimerInterrupt+0x3c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0a      	ldr	r2, [pc, #40]	@ (800875c <vPortSetupTimerInterrupt+0x40>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	099b      	lsrs	r3, r3, #6
 8008738:	4a09      	ldr	r2, [pc, #36]	@ (8008760 <vPortSetupTimerInterrupt+0x44>)
 800873a:	3b01      	subs	r3, #1
 800873c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800873e:	4b04      	ldr	r3, [pc, #16]	@ (8008750 <vPortSetupTimerInterrupt+0x34>)
 8008740:	2207      	movs	r2, #7
 8008742:	601a      	str	r2, [r3, #0]
}
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	e000e010 	.word	0xe000e010
 8008754:	e000e018 	.word	0xe000e018
 8008758:	20000000 	.word	0x20000000
 800875c:	10624dd3 	.word	0x10624dd3
 8008760:	e000e014 	.word	0xe000e014

08008764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008774 <vPortEnableVFP+0x10>
 8008768:	6801      	ldr	r1, [r0, #0]
 800876a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800876e:	6001      	str	r1, [r0, #0]
 8008770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008772:	bf00      	nop
 8008774:	e000ed88 	.word	0xe000ed88

08008778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800877e:	f3ef 8305 	mrs	r3, IPSR
 8008782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	d915      	bls.n	80087b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800878a:	4a18      	ldr	r2, [pc, #96]	@ (80087ec <vPortValidateInterruptPriority+0x74>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008794:	4b16      	ldr	r3, [pc, #88]	@ (80087f0 <vPortValidateInterruptPriority+0x78>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	7afa      	ldrb	r2, [r7, #11]
 800879a:	429a      	cmp	r2, r3
 800879c:	d20b      	bcs.n	80087b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087b6:	4b0f      	ldr	r3, [pc, #60]	@ (80087f4 <vPortValidateInterruptPriority+0x7c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087be:	4b0e      	ldr	r3, [pc, #56]	@ (80087f8 <vPortValidateInterruptPriority+0x80>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d90b      	bls.n	80087de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	603b      	str	r3, [r7, #0]
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	e7fd      	b.n	80087da <vPortValidateInterruptPriority+0x62>
	}
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	e000e3f0 	.word	0xe000e3f0
 80087f0:	20001e0c 	.word	0x20001e0c
 80087f4:	e000ed0c 	.word	0xe000ed0c
 80087f8:	20001e10 	.word	0x20001e10

080087fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	@ 0x28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008804:	2300      	movs	r3, #0
 8008806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008808:	f7fe fbd2 	bl	8006fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800880c:	4b5c      	ldr	r3, [pc, #368]	@ (8008980 <pvPortMalloc+0x184>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008814:	f000 f924 	bl	8008a60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008818:	4b5a      	ldr	r3, [pc, #360]	@ (8008984 <pvPortMalloc+0x188>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4013      	ands	r3, r2
 8008820:	2b00      	cmp	r3, #0
 8008822:	f040 8095 	bne.w	8008950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01e      	beq.n	800886a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800882c:	2208      	movs	r2, #8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4413      	add	r3, r2
 8008832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	2b00      	cmp	r3, #0
 800883c:	d015      	beq.n	800886a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f023 0307 	bic.w	r3, r3, #7
 8008844:	3308      	adds	r3, #8
 8008846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00b      	beq.n	800886a <pvPortMalloc+0x6e>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	617b      	str	r3, [r7, #20]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d06f      	beq.n	8008950 <pvPortMalloc+0x154>
 8008870:	4b45      	ldr	r3, [pc, #276]	@ (8008988 <pvPortMalloc+0x18c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d86a      	bhi.n	8008950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800887a:	4b44      	ldr	r3, [pc, #272]	@ (800898c <pvPortMalloc+0x190>)
 800887c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800887e:	4b43      	ldr	r3, [pc, #268]	@ (800898c <pvPortMalloc+0x190>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008884:	e004      	b.n	8008890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d903      	bls.n	80088a2 <pvPortMalloc+0xa6>
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f1      	bne.n	8008886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088a2:	4b37      	ldr	r3, [pc, #220]	@ (8008980 <pvPortMalloc+0x184>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d051      	beq.n	8008950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	4413      	add	r3, r2
 80088b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	1ad2      	subs	r2, r2, r3
 80088c6:	2308      	movs	r3, #8
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d920      	bls.n	8008910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00b      	beq.n	80088f8 <pvPortMalloc+0xfc>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	613b      	str	r3, [r7, #16]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	1ad2      	subs	r2, r2, r3
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800890a:	69b8      	ldr	r0, [r7, #24]
 800890c:	f000 f90a 	bl	8008b24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008910:	4b1d      	ldr	r3, [pc, #116]	@ (8008988 <pvPortMalloc+0x18c>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	4a1b      	ldr	r2, [pc, #108]	@ (8008988 <pvPortMalloc+0x18c>)
 800891c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800891e:	4b1a      	ldr	r3, [pc, #104]	@ (8008988 <pvPortMalloc+0x18c>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4b1b      	ldr	r3, [pc, #108]	@ (8008990 <pvPortMalloc+0x194>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d203      	bcs.n	8008932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800892a:	4b17      	ldr	r3, [pc, #92]	@ (8008988 <pvPortMalloc+0x18c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a18      	ldr	r2, [pc, #96]	@ (8008990 <pvPortMalloc+0x194>)
 8008930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	4b13      	ldr	r3, [pc, #76]	@ (8008984 <pvPortMalloc+0x188>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	431a      	orrs	r2, r3
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008946:	4b13      	ldr	r3, [pc, #76]	@ (8008994 <pvPortMalloc+0x198>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	4a11      	ldr	r2, [pc, #68]	@ (8008994 <pvPortMalloc+0x198>)
 800894e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008950:	f7fe fb3c 	bl	8006fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <pvPortMalloc+0x17a>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60fb      	str	r3, [r7, #12]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <pvPortMalloc+0x176>
	return pvReturn;
 8008976:	69fb      	ldr	r3, [r7, #28]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3728      	adds	r7, #40	@ 0x28
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	200029d4 	.word	0x200029d4
 8008984:	200029e8 	.word	0x200029e8
 8008988:	200029d8 	.word	0x200029d8
 800898c:	200029cc 	.word	0x200029cc
 8008990:	200029dc 	.word	0x200029dc
 8008994:	200029e0 	.word	0x200029e0

08008998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d04f      	beq.n	8008a4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089aa:	2308      	movs	r3, #8
 80089ac:	425b      	negs	r3, r3
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4413      	add	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4b25      	ldr	r3, [pc, #148]	@ (8008a54 <vPortFree+0xbc>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4013      	ands	r3, r2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10b      	bne.n	80089de <vPortFree+0x46>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	60fb      	str	r3, [r7, #12]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <vPortFree+0x66>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60bb      	str	r3, [r7, #8]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	4b14      	ldr	r3, [pc, #80]	@ (8008a54 <vPortFree+0xbc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01e      	beq.n	8008a4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11a      	bne.n	8008a4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	4b0e      	ldr	r3, [pc, #56]	@ (8008a54 <vPortFree+0xbc>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	401a      	ands	r2, r3
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a24:	f7fe fac4 	bl	8006fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <vPortFree+0xc0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	4a09      	ldr	r2, [pc, #36]	@ (8008a58 <vPortFree+0xc0>)
 8008a34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a36:	6938      	ldr	r0, [r7, #16]
 8008a38:	f000 f874 	bl	8008b24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a3c:	4b07      	ldr	r3, [pc, #28]	@ (8008a5c <vPortFree+0xc4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3301      	adds	r3, #1
 8008a42:	4a06      	ldr	r2, [pc, #24]	@ (8008a5c <vPortFree+0xc4>)
 8008a44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a46:	f7fe fac1 	bl	8006fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a4a:	bf00      	nop
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200029e8 	.word	0x200029e8
 8008a58:	200029d8 	.word	0x200029d8
 8008a5c:	200029e4 	.word	0x200029e4

08008a60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a66:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008a6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a6c:	4b27      	ldr	r3, [pc, #156]	@ (8008b0c <prvHeapInit+0xac>)
 8008a6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00c      	beq.n	8008a94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0307 	bic.w	r3, r3, #7
 8008a86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b0c <prvHeapInit+0xac>)
 8008a90:	4413      	add	r3, r2
 8008a92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a98:	4a1d      	ldr	r2, [pc, #116]	@ (8008b10 <prvHeapInit+0xb0>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008b10 <prvHeapInit+0xb0>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008aac:	2208      	movs	r2, #8
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a15      	ldr	r2, [pc, #84]	@ (8008b14 <prvHeapInit+0xb4>)
 8008ac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ac2:	4b14      	ldr	r3, [pc, #80]	@ (8008b14 <prvHeapInit+0xb4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008aca:	4b12      	ldr	r3, [pc, #72]	@ (8008b14 <prvHeapInit+0xb4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b14 <prvHeapInit+0xb4>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4a0a      	ldr	r2, [pc, #40]	@ (8008b18 <prvHeapInit+0xb8>)
 8008aee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4a09      	ldr	r2, [pc, #36]	@ (8008b1c <prvHeapInit+0xbc>)
 8008af6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008af8:	4b09      	ldr	r3, [pc, #36]	@ (8008b20 <prvHeapInit+0xc0>)
 8008afa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008afe:	601a      	str	r2, [r3, #0]
}
 8008b00:	bf00      	nop
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	20001e14 	.word	0x20001e14
 8008b10:	200029cc 	.word	0x200029cc
 8008b14:	200029d4 	.word	0x200029d4
 8008b18:	200029dc 	.word	0x200029dc
 8008b1c:	200029d8 	.word	0x200029d8
 8008b20:	200029e8 	.word	0x200029e8

08008b24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b2c:	4b28      	ldr	r3, [pc, #160]	@ (8008bd0 <prvInsertBlockIntoFreeList+0xac>)
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e002      	b.n	8008b38 <prvInsertBlockIntoFreeList+0x14>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d8f7      	bhi.n	8008b32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d108      	bne.n	8008b66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	441a      	add	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d118      	bne.n	8008bac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	4b15      	ldr	r3, [pc, #84]	@ (8008bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d00d      	beq.n	8008ba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	441a      	add	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e008      	b.n	8008bb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	e003      	b.n	8008bb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d002      	beq.n	8008bc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200029cc 	.word	0x200029cc
 8008bd4:	200029d4 	.word	0x200029d4

08008bd8 <memset>:
 8008bd8:	4402      	add	r2, r0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d100      	bne.n	8008be2 <memset+0xa>
 8008be0:	4770      	bx	lr
 8008be2:	f803 1b01 	strb.w	r1, [r3], #1
 8008be6:	e7f9      	b.n	8008bdc <memset+0x4>

08008be8 <__libc_init_array>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	4d0d      	ldr	r5, [pc, #52]	@ (8008c20 <__libc_init_array+0x38>)
 8008bec:	4c0d      	ldr	r4, [pc, #52]	@ (8008c24 <__libc_init_array+0x3c>)
 8008bee:	1b64      	subs	r4, r4, r5
 8008bf0:	10a4      	asrs	r4, r4, #2
 8008bf2:	2600      	movs	r6, #0
 8008bf4:	42a6      	cmp	r6, r4
 8008bf6:	d109      	bne.n	8008c0c <__libc_init_array+0x24>
 8008bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8008c28 <__libc_init_array+0x40>)
 8008bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8008c2c <__libc_init_array+0x44>)
 8008bfc:	f000 f826 	bl	8008c4c <_init>
 8008c00:	1b64      	subs	r4, r4, r5
 8008c02:	10a4      	asrs	r4, r4, #2
 8008c04:	2600      	movs	r6, #0
 8008c06:	42a6      	cmp	r6, r4
 8008c08:	d105      	bne.n	8008c16 <__libc_init_array+0x2e>
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c10:	4798      	blx	r3
 8008c12:	3601      	adds	r6, #1
 8008c14:	e7ee      	b.n	8008bf4 <__libc_init_array+0xc>
 8008c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1a:	4798      	blx	r3
 8008c1c:	3601      	adds	r6, #1
 8008c1e:	e7f2      	b.n	8008c06 <__libc_init_array+0x1e>
 8008c20:	08008df4 	.word	0x08008df4
 8008c24:	08008df4 	.word	0x08008df4
 8008c28:	08008df4 	.word	0x08008df4
 8008c2c:	08008df8 	.word	0x08008df8

08008c30 <memcpy>:
 8008c30:	440a      	add	r2, r1
 8008c32:	4291      	cmp	r1, r2
 8008c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c38:	d100      	bne.n	8008c3c <memcpy+0xc>
 8008c3a:	4770      	bx	lr
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c46:	4291      	cmp	r1, r2
 8008c48:	d1f9      	bne.n	8008c3e <memcpy+0xe>
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
